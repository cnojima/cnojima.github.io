/*! For license information please see integrated.js.LICENSE.txt */
(()=>{var __webpack_modules__={1:(module,exports)=>{eval('/*-\n * Copyright 2014 Square Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Jose = {};\n\n/**\n * Javascript Object Signing and Encryption library.\n *\n * @author Alok Menghrajani <alok@squareup.com>\n */\n\n/**\n * Initializes a JoseJWE object.\n */\nvar JoseJWE = {};\n\n/**\n * Initializes a JoseJWS object.\n */\nvar JoseJWS = {};\n\n/**\n * Set crypto provider to use (window.crypto, node-webcrypto-ossl, node-webcrypto-pkcs11 etc.).\n */\nexports.setCrypto = function (cp) {\n  Jose.crypto = cp;\n};\n\n/**\n * Default to the global "crypto" variable\n */\nif (typeof(crypto) !== \'undefined\') {\n  exports.setCrypto(crypto);\n}\n\n/**\n * Use Node versions of atob, btoa functions outside the browser\n */\nif (typeof atob !== "function") {\n  atob = function (str) {\n    return new Buffer(str, \'base64\').toString(\'binary\');\n  };\n}\n\nif (typeof btoa !== "function") {\n  btoa = function (str) {\n    var buffer;\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = new Buffer(str.toString(), \'binary\');\n    }\n    return buffer.toString(\'base64\');\n  };\n}\n\n/**\n * Checks if we have all the required APIs.\n *\n * It might make sense to take a Cryptographer and delegate some of the checks\n * to the cryptographer. I however wanted to keep things simple, so I put all\n * the checks here for now.\n *\n * This list is generated manually and needs to be kept up-to-date.\n *\n * Casual testing shows that:\n * - things work in Chrome 40.0.2214.115\n * - things work in Firefox 35.0.1\n * - Safari 7.1.3 doesn\'t support JWK keys.\n * - Internet Explorer doesn\'t support Promises.\n *\n * Note: We don\'t check if the browser supports specific crypto operations.\n *       I.e. it\'s possible for this function to return true, but encryption or\n *       decryption to subsequently fail because the browser does not support a\n *       given encryption, decryption, key wrapping, key unwrapping or hmac\n *       operation.\n *\n * @return bool\n */\nJose.caniuse = function() {\n  var r = true;\n\n  // Promises/A+ (https://promisesaplus.com/)\n  r = r && (typeof Promise == "function");\n  r = r && (typeof Promise.reject == "function");\n  r = r && (typeof Promise.prototype.then == "function");\n  r = r && (typeof Promise.all == "function");\n\n  // Crypto (http://www.w3.org/TR/WebCryptoAPI/)\n  r = r && (typeof Jose.crypto == "object");\n  r = r && (typeof Jose.crypto.subtle == "object");\n  r = r && (typeof Jose.crypto.getRandomValues == "function");\n  r = r && (typeof Jose.crypto.subtle.importKey == "function");\n  r = r && (typeof Jose.crypto.subtle.generateKey == "function");\n  r = r && (typeof Jose.crypto.subtle.exportKey == "function");\n  r = r && (typeof Jose.crypto.subtle.wrapKey == "function");\n  r = r && (typeof Jose.crypto.subtle.unwrapKey == "function");\n  r = r && (typeof Jose.crypto.subtle.encrypt == "function");\n  r = r && (typeof Jose.crypto.subtle.decrypt == "function");\n  r = r && (typeof Jose.crypto.subtle.sign == "function");\n\n  // ArrayBuffer (http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arraybuffer-constructor)\n  r = r && (typeof ArrayBuffer == "function");\n  r = r && (typeof Uint8Array == "function" || typeof Uint8Array == "object"); // Safari uses "object"\n  r = r && (typeof Uint32Array == "function" || typeof Uint32Array == "object"); // Safari uses "object"\n  // skipping Uint32Array.prototype.buffer because https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-%typedarrayprototype%-object\n\n  // JSON (http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.3)\n  r = r && (typeof JSON == "object");\n  r = r && (typeof JSON.parse == "function");\n  r = r && (typeof JSON.stringify == "function");\n\n  // Base64 (http://www.w3.org/TR/html5/webappapis.html#dom-windowbase64-atob)\n  r = r && (typeof atob == "function");\n  r = r && (typeof btoa == "function");\n\n  // skipping Array functions (map, join, push, length, etc.)\n  // skipping String functions (split, charCodeAt, fromCharCode, replace, etc.)\n  // skipping regexp.test and parseInt\n\n  return r;\n};\n\n/**\n * Feel free to override this function.\n */\nJose.assert = function(expr, msg) {\n  if (!expr) {\n    throw new Error(msg);\n  }\n};\n\nexports.Jose = Jose;\nexports.JoseJWE = JoseJWE;\nexports.JoseJWS = JoseJWS;\n/*-\n * Copyright 2014 Square Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The WebCryptographer uses http://www.w3.org/TR/WebCryptoAPI/ to perform\n * various crypto operations. In theory, this should help build the library with\n * different underlying crypto APIs. I\'m however unclear if we\'ll run into code\n * duplication or callback vs Promise based API issues.\n */\nvar WebCryptographer = function() {\n  this.setKeyEncryptionAlgorithm("RSA-OAEP");\n  this.setContentEncryptionAlgorithm("A256GCM");\n  this.setContentSignAlgorithm("RS256");\n};\n\nJose.WebCryptographer = WebCryptographer;\n\n/**\n * Overrides the default key encryption algorithm\n * @param alg  string\n */\nWebCryptographer.prototype.setKeyEncryptionAlgorithm = function(alg) {\n  this.key_encryption = getCryptoConfig(alg);\n};\n\nWebCryptographer.prototype.getKeyEncryptionAlgorithm = function() {\n  return this.key_encryption.jwe_name;\n};\n\n/**\n * Overrides the default content encryption algorithm\n * @param alg  string\n */\nWebCryptographer.prototype.setContentEncryptionAlgorithm = function(alg) {\n  this.content_encryption = getCryptoConfig(alg);\n};\n\nWebCryptographer.prototype.getContentEncryptionAlgorithm = function() {\n  return this.content_encryption.jwe_name;\n};\n\n/**\n * Overrides the default content sign algorithm\n * @param alg  string\n */\nWebCryptographer.prototype.setContentSignAlgorithm = function(alg) {\n  this.content_sign = getSignConfig(alg);\n};\n\nWebCryptographer.prototype.getContentSignAlgorithm = function() {\n  return this.content_sign.jwa_name;\n};\n\n/**\n * Generates an IV.\n * This function mainly exists so that it can be mocked for testing purpose.\n *\n * @return Uint8Array with random bytes\n */\nWebCryptographer.prototype.createIV = function() {\n  var iv = new Uint8Array(new Array(this.content_encryption.iv_bytes));\n  return Jose.crypto.getRandomValues(iv);\n};\n\n/**\n * Creates a random content encryption key.\n * This function mainly exists so that it can be mocked for testing purpose.\n *\n * @return Promise<CryptoKey>\n */\nWebCryptographer.prototype.createCek = function() {\n  var hack = getCekWorkaround(this.content_encryption);\n  return Jose.crypto.subtle.generateKey(hack.id, true, hack.enc_op);\n};\n\nWebCryptographer.prototype.wrapCek = function(cek, key) {\n  return Jose.crypto.subtle.wrapKey("raw", cek, key, this.key_encryption.id);\n};\n\nWebCryptographer.prototype.unwrapCek = function(cek, key) {\n  var hack = getCekWorkaround(this.content_encryption);\n  var extractable = (this.content_encryption.specific_cek_bytes > 0);\n  var key_encryption = this.key_encryption.id;\n\n  return Jose.crypto.subtle.unwrapKey("raw", cek, key, key_encryption, hack.id, extractable, hack.dec_op);\n};\n\n/**\n * Returns algorithm and operation needed to create a CEK.\n *\n * In some cases, e.g. A128CBC-HS256, the CEK gets split into two keys. The Web\n * Crypto API does not allow us to generate an arbitrary number of bytes and\n * then create a CryptoKey without any associated algorithm. We therefore piggy\n * back on AES-CBS and HMAC which allows the creation of CEKs of size 16, 32, 64\n * and 128 bytes.\n */\nvar getCekWorkaround = function(alg) {\n  var len = alg.specific_cek_bytes;\n  if (len) {\n    if (len == 16) {\n      return {id: {name: "AES-CBC", length: 128}, enc_op: ["encrypt"], dec_op: ["decrypt"]};\n    } else if (len == 32) {\n      return {id: {name: "AES-CBC", length: 256}, enc_op: ["encrypt"], dec_op: ["decrypt"]};\n    } else if (len == 64) {\n      return {id: {name: "HMAC", hash: {name: "SHA-256"}}, enc_op: ["sign"], dec_op: ["verify"]};\n    } else if (len == 128) {\n      return {id: {name: "HMAC", hash: {name: "SHA-384"}}, enc_op: ["sign"], dec_op: ["verify"]};\n    } else {\n      Jose.assert(false, "getCekWorkaround: invalid len");\n    }\n  }\n  return {id: alg.id, enc_op: ["encrypt"], dec_op: ["decrypt"]};\n};\n\n/**\n * Encrypts plain_text with cek.\n *\n * @param iv          Uint8Array\n * @param aad         Uint8Array\n * @param cek_promise Promise<CryptoKey>\n * @param plain_text  Uint8Array\n * @return Promise<json>\n */\nWebCryptographer.prototype.encrypt = function(iv, aad, cek_promise, plain_text) {\n  var config = this.content_encryption;\n  if (iv.length != config.iv_bytes) {\n    return Promise.reject(Error("invalid IV length"));\n  }\n  if (config.auth.aead) {\n    var tag_bytes = config.auth.tag_bytes;\n\n    var enc = {\n      name: config.id.name,\n      iv: iv,\n      additionalData: aad,\n      tagLength: tag_bytes * 8\n    };\n\n    return cek_promise.then(function(cek) {\n      return Jose.crypto.subtle.encrypt(enc, cek, plain_text).then(function(cipher_text) {\n        var offset = cipher_text.byteLength - tag_bytes;\n        return {\n          cipher: cipher_text.slice(0, offset),\n          tag: cipher_text.slice(offset)\n        };\n      });\n    });\n  } else {\n    var keys = splitKey(config, cek_promise, ["encrypt"]);\n    var mac_key_promise = keys[0];\n    var enc_key_promise = keys[1];\n\n    // Encrypt the plain text\n    var cipher_text_promise = enc_key_promise.then(function(enc_key) {\n      var enc = {\n        name: config.id.name,\n        iv: iv\n      };\n      return Jose.crypto.subtle.encrypt(enc, enc_key, plain_text);\n    });\n\n    // compute MAC\n    var mac_promise = cipher_text_promise.then(function(cipher_text) {\n      return truncatedMac(\n        config,\n        mac_key_promise,\n        aad,\n        iv,\n        cipher_text);\n    });\n\n    return Promise.all([cipher_text_promise, mac_promise]).then(function(all) {\n      var cipher_text = all[0];\n      var mac = all[1];\n      return {\n        cipher: cipher_text,\n        tag: mac\n      };\n    });\n  }\n};\n\n/**\n * Decrypts cipher_text with cek. Validates the tag.\n *\n * @param cek_promise    Promise<CryptoKey>\n * @param aad protected header\n * @param iv IV\n * @param cipher_text text to be decrypted\n * @param tag to be verified\n * @return Promise<string>\n */\nWebCryptographer.prototype.decrypt = function(cek_promise, aad, iv, cipher_text, tag) {\n  /**\n   * Compares two Uint8Arrays in constant time.\n   *\n   * @return Promise<void>\n   */\n  var compare = function(config, mac_key_promise, arr1, arr2) {\n    Jose.assert(arr1 instanceof Uint8Array, "compare: invalid input");\n    Jose.assert(arr2 instanceof Uint8Array, "compare: invalid input");\n\n    return mac_key_promise.then(function(mac_key) {\n      var hash1 = Jose.crypto.subtle.sign(config.auth.id, mac_key, arr1);\n      var hash2 = Jose.crypto.subtle.sign(config.auth.id, mac_key, arr2);\n      return Promise.all([hash1, hash2]).then(function(all) {\n        var hash1 = new Uint8Array(all[0]);\n        var hash2 = new Uint8Array(all[1]);\n        if (hash1.length != hash2.length) {\n          throw new Error("compare failed");\n        }\n        for (var i = 0; i < hash1.length; i++) {\n          if (hash1[i] != hash2[i]) {\n            throw new Error("compare failed");\n          }\n        }\n        return Promise.resolve(null);\n      });\n    });\n  };\n\n  if (iv.length != this.content_encryption.iv_bytes) {\n    return Promise.reject(Error("decryptCiphertext: invalid IV"));\n  }\n\n  var config = this.content_encryption;\n  if (config.auth.aead) {\n    var dec = {\n      name: config.id.name,\n      iv: iv,\n      additionalData: aad,\n      tagLength: config.auth.tag_bytes * 8\n    };\n\n    return cek_promise.then(function(cek) {\n      var buf = Utils.arrayBufferConcat(cipher_text, tag);\n      return Jose.crypto.subtle.decrypt(dec, cek, buf);\n    });\n  } else {\n    var keys = splitKey(config, cek_promise, ["decrypt"]);\n    var mac_key_promise = keys[0];\n    var enc_key_promise = keys[1];\n\n    // Validate the MAC\n    var mac_promise = truncatedMac(\n      config,\n      mac_key_promise,\n      aad,\n      iv,\n      cipher_text);\n\n    return Promise.all([enc_key_promise, mac_promise]).then(function(all) {\n      var enc_key = all[0];\n      var mac = all[1];\n\n      return compare(config, mac_key_promise, new Uint8Array(mac), tag).then(function() {\n        var dec = {\n          name: config.id.name,\n          iv: iv\n        };\n        return Jose.crypto.subtle.decrypt(dec, enc_key, cipher_text);\n      }).catch(function(err) {\n        return Promise.reject(Error("decryptCiphertext: MAC failed."));\n      });\n    });\n  }\n};\n\n/**\n * Signs plain_text.\n *\n * @param aad         json\n * @param payload     String or json\n * @param key_promise Promise<CryptoKey>\n * @return Promise<ArrayBuffer>\n */\nWebCryptographer.prototype.sign = function(aad, payload, key_promise) {\n  var config = this.content_sign;\n\n  if (aad.alg) {\n    config = getSignConfig(aad.alg);\n  }\n\n  // Encrypt the plain text\n  return key_promise.then(function(key) {\n    return Jose.crypto.subtle.sign(config.id, key, Utils.arrayFromString(Utils.Base64Url.encode(JSON.stringify(aad)) + \'.\' + Utils.Base64Url.encodeArray(payload)));\n  });\n};\n\n/**\n * Verify JWS.\n *\n * @param payload     Base64Url encoded payload\n * @param aad         String Base64Url encoded JSON representation of the protected JWS header\n * @param signature   Uint8Array containing the signature\n * @param key_promise Promise<CryptoKey>\n * @param key_id      value of the kid JoseHeader, it\'ll be passed as part of the result to the returned promise\n * @return Promise<json>\n */\nWebCryptographer.prototype.verify = function(aad, payload, signature, key_promise, key_id) {\n  var config = this.content_sign;\n\n  return key_promise.then(function(key) {\n    config = getSignConfig(getJwaNameForSignKey(key));\n    return Jose.crypto.subtle.verify(config.id, key, signature, Utils.arrayFromString(aad + "." + payload)).then(function(res) {\n      return {kid: key_id, verified: res};\n    });\n  });\n};\n\nJose.WebCryptographer.keyId = function(rsa_key) {\n  return Utils.sha256(rsa_key.n + "+" + rsa_key.d);\n};\n\n/**\n * Splits a CEK into two pieces: a MAC key and an ENC key.\n *\n * This code is structured around the fact that the crypto API does not provide\n * a way to validate truncated MACs. The MAC key is therefore always imported to\n * sign data.\n *\n * @param config (used for key lengths & algorithms)\n * @param cek_promise Promise<CryptoKey>  CEK key to split\n * @param purpose Array<String> usages of the imported key\n * @return [Promise<mac key>, Promise<enc key>]\n */\nvar splitKey = function(config, cek_promise, purpose) {\n  // We need to split the CEK key into a MAC and ENC keys\n  var cek_bytes_promise = cek_promise.then(function(cek) {\n    return Jose.crypto.subtle.exportKey("raw", cek);\n  });\n  var mac_key_promise = cek_bytes_promise.then(function(cek_bytes) {\n    if (cek_bytes.byteLength * 8 != config.id.length + config.auth.key_bytes * 8) {\n      return Promise.reject(Error("encryptPlainText: incorrect cek length"));\n    }\n    var bytes = cek_bytes.slice(0, config.auth.key_bytes);\n    return Jose.crypto.subtle.importKey("raw", bytes, config.auth.id, false, ["sign"]);\n  });\n  var enc_key_promise = cek_bytes_promise.then(function(cek_bytes) {\n    if (cek_bytes.byteLength * 8 != config.id.length + config.auth.key_bytes * 8) {\n      return Promise.reject(Error("encryptPlainText: incorrect cek length"));\n    }\n    var bytes = cek_bytes.slice(config.auth.key_bytes);\n    return Jose.crypto.subtle.importKey("raw", bytes, config.id, false, purpose);\n  });\n  return [mac_key_promise, enc_key_promise];\n};\n\n/**\n * Converts the Jose web algorithms into data which is\n * useful for the Web Crypto API.\n *\n * length = in bits\n * bytes = in bytes\n */\nvar getCryptoConfig = function(alg) {\n  switch (alg) {\n    // Key encryption\n    case "RSA-OAEP":\n      return {\n        jwe_name: "RSA-OAEP",\n        id: {name: "RSA-OAEP", hash: {name: "SHA-1"}}\n      };\n    case "RSA-OAEP-256":\n      // return {\n      //   jwe_name: "RSA-OAEP-256",\n      //   id: {name: "RSA-OAEP-256", hash: {name: "SHA-256"}}\n      // };\n\n      // ORIGINAL SQUARE HEADER CONFIG\n      return {\n        jwe_name: "RSA-OAEP-256",\n        id: {name: "RSA-OAEP", hash: {name: "SHA-256"}}\n      };\n    case "A128KW":\n      return {\n        jwe_name: "A128KW",\n        id: {name: "AES-KW", length: 128}\n      };\n    case "A256KW":\n      return {\n        jwe_name: "A256KW",\n        id: {name: "AES-KW", length: 256}\n      };\n    case "dir":\n      return {\n        jwe_name: "dir"\n      };\n\n    // Content encryption\n    case "A128CBC-HS256":\n      return {\n        jwe_name: "A128CBC-HS256",\n        id: {name: "AES-CBC", length: 128},\n        iv_bytes: 16,\n        specific_cek_bytes: 32,\n        auth: {\n          key_bytes: 16,\n          id: {name: "HMAC", hash: {name: "SHA-256"}},\n          truncated_bytes: 16\n        }\n      };\n    case "A256CBC-HS512":\n      return {\n        jwe_name: "A256CBC-HS512",\n        id: {name: "AES-CBC", length: 256},\n        iv_bytes: 16,\n        specific_cek_bytes: 64,\n        auth: {\n          key_bytes: 32,\n          id: {name: "HMAC", hash: {name: "SHA-512"}},\n          truncated_bytes: 32\n        }\n      };\n    case "A128GCM":\n      return {\n        jwe_name: "A128GCM",\n        id: {name: "AES-GCM", length: 128},\n        iv_bytes: 12,\n        auth: {\n          aead: true,\n          tag_bytes: 16\n        }\n      };\n    case "A256GCM":\n      return {\n        jwe_name: "A256GCM",\n        id: {name: "AES-GCM", length: 256},\n        iv_bytes: 12,\n        auth: {\n          aead: true,\n          tag_bytes: 16\n        }\n      };\n    default:\n      throw Error("unsupported algorithm: " + alg);\n  }\n};\n\n/**\n * Computes a truncated MAC.\n *\n * @param config              configuration\n * @param mac_key_promise     Promise<CryptoKey>  mac key\n * @param aad                 Uint8Array\n * @param iv                  Uint8Array\n * @param cipher_text         Uint8Array\n * @return Promise<buffer>    truncated MAC\n */\nvar truncatedMac = function(config, mac_key_promise, aad, iv, cipher_text) {\n  return mac_key_promise.then(function(mac_key) {\n    var al = new Uint8Array(Utils.arrayFromInt32(aad.length * 8));\n    var al_full = new Uint8Array(8);\n    al_full.set(al, 4);\n    var buf = Utils.arrayBufferConcat(aad, iv, cipher_text, al_full);\n    return Jose.crypto.subtle.sign(config.auth.id, mac_key, buf).then(function(bytes) {\n      return bytes.slice(0, config.auth.truncated_bytes);\n    });\n  });\n};\n\n/**\n * Converts the Jose web algorithms into data which is\n * useful for the Web Crypto API.\n */\nvar getSignConfig = function(alg) {\n\n  switch (alg) {\n    case "RS256":\n      return {\n        jwa_name: "RS256",\n        id: {name: "RSASSA-PKCS1-v1_5", hash: {name: "SHA-256"}}\n      };\n    case "RS384":\n      return {\n        jwa_name: "RS384",\n        id: {name: "RSASSA-PKCS1-v1_5", hash: {name: "SHA-384"}}\n      };\n    case "RS512":\n      return {\n        jwa_name: "RS512",\n        id: {name: "RSASSA-PKCS1-v1_5", hash: {name: "SHA-512"}}\n      };\n    case "PS256":\n      return {\n        jwa_name: "PS256",\n        id: {name: "RSA-PSS", hash: {name: "SHA-256"}, saltLength: 20}\n      };\n    case "PS384":\n      return {\n        jwa_name: "PS384",\n        id: {name: "RSA-PSS", hash: {name: "SHA-384"}, saltLength: 20}\n      };\n    case "PS512":\n      return {\n        jwa_name: "PS512",\n        id: {name: "RSA-PSS", hash: {name: "SHA-512"}, saltLength: 20}\n      };\n    case "HS256":\n      return {\n        jwa_name: "HS256",\n        id: {name: "HMAC", hash: {name: "SHA-256"}}\n      };\n    case "HS384":\n      return {\n        jwa_name: "HS384",\n        id: {name: "HMAC", hash: {name: "SHA-384"}}\n      };\n    case "HS512":\n      return {\n        jwa_name: "HS512",\n        id: {name: "HMAC", hash: {name: "SHA-512"}}\n      };\n    case "ES256":\n      return {\n        jwa_name: "ES256",\n        id: {name: "ECDSA", hash: {name: "SHA-256"}}\n      };\n    case "ES384":\n      return {\n        jwa_name: "ES384",\n        id: {name: "ECDSA", hash: {name: "SHA-384"}}\n      };\n    case "ES512":\n      return {\n        jwa_name: "ES512",\n        id: {name: "ECDSA", hash: {name: "SHA-512"}}\n      };\n    default:\n      throw Error("unsupported algorithm: " + alg);\n  }\n};\n\n/**\n * Returns JWA name for a given CryptoKey\n * @param key CryptoKey\n */\nvar getJwaNameForSignKey = function(key) {\n\n  var rv = "",\n    sign_algo = key.algorithm.name,\n    hash_algo = key.algorithm.hash.name;\n\n  if(sign_algo == "RSASSA-PKCS1-v1_5") {\n    rv = "R";\n  } else if(sign_algo == "RSA-PSS") {\n    rv = "P";\n  } else {\n    throw new Error("unsupported sign/verify algorithm " + sign_algo);\n  }\n\n  if(hash_algo.indexOf("SHA-") === 0) {\n    rv += "S";\n  } else {\n    throw new Error("unsupported hash algorithm " + sign_algo);\n  }\n\n  rv += hash_algo.substring(4);\n\n  return rv;\n};\n\n/**\n * Derives key usage from algorithm\'s name\n *\n * @param alg String algorithm name\n * @returns {*}\n */\nvar getKeyUsageByAlg = function(alg) {\n\n  switch (alg) {\n    // signature\n    case "RS256":\n    case "RS384":\n    case "RS512":\n    case "PS256":\n    case "PS384":\n    case "PS512":\n    case "HS256":\n    case "HS384":\n    case "HS512":\n    case "ES256":\n    case "ES384":\n    case "ES512":\n      return {\n        publicKey: "verify",\n        privateKey: "sign"\n      };\n    // key encryption\n    case "RSA-OAEP":\n    case "RSA-OAEP-256":\n    case "A128KW":\n    case "A256KW":\n      return {\n        publicKey: "wrapKey",\n        privateKey: "unwrapKey"\n      };\n    default:\n      throw Error("unsupported algorithm: " + alg);\n  }\n};\n\n// Visa-specific\nmodule.exports = WebCryptographer;\n\n/*-\n * Copyright 2014 Square Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nJose.Utils = {};\nvar Utils = {};\n\n/**\n * Converts the output from `openssl x509 -text` or `openssl rsa -text` into a\n * CryptoKey which can then be used with RSA-OAEP. Also accepts (and validates)\n * JWK keys.\n *\n * TODO: this code probably belongs in the webcryptographer.\n *\n * @param rsa_key  public RSA key in json format. Parameters can be base64\n *                 encoded, strings or number (for \'e\').\n * @param alg      String, name of the algorithm\n * @return Promise<CryptoKey>\n */\nJose.Utils.importRsaPublicKey = function(rsa_key, alg) {\n  var jwk;\n  var config;\n  var usage = getKeyUsageByAlg(alg);\n\n  if (usage.publicKey == "wrapKey") {\n    if (!rsa_key.alg) {\n      rsa_key.alg = alg;\n    }\n    jwk = Utils.convertRsaKey(rsa_key, ["n", "e"]);\n    config = getCryptoConfig(alg);\n  } else {\n    var rk = {};\n    for (var name in rsa_key) {\n      if (rsa_key.hasOwnProperty(name)) {\n        rk[name] = rsa_key[name];\n      }\n    }\n\n    if (!rk.alg && alg) {\n      rk.alg = alg;\n    }\n    config = getSignConfig(rk.alg);\n    jwk = Utils.convertRsaKey(rk, ["n", "e"]);\n    jwk.ext = true;\n  }\n  return Jose.crypto.subtle.importKey("jwk", jwk, config.id, false, [usage.publicKey]);\n};\n\n/**\n * Converts the output from `openssl x509 -text` or `openssl rsa -text` into a\n * CryptoKey which can then be used with RSA-OAEP and RSA. Also accepts (and validates)\n * JWK keys.\n *\n * TODO: this code probably belongs in the webcryptographer.\n *\n * @param rsa_key  private RSA key in json format. Parameters can be base64\n *                 encoded, strings or number (for \'e\').\n * @param alg      String, name of the algorithm\n * @return Promise<CryptoKey>\n */\nJose.Utils.importRsaPrivateKey = function(rsa_key, alg) {\n  var jwk;\n  var config;\n  var usage = getKeyUsageByAlg(alg);\n\n  if (usage.privateKey == "unwrapKey") {\n    if (!rsa_key.alg) {\n      rsa_key.alg = alg;\n    }\n    jwk = Utils.convertRsaKey(rsa_key, ["n", "e", "d", "p", "q", "dp", "dq", "qi"]);\n    config = getCryptoConfig(alg);\n  } else {\n    var rk = {};\n    for (var name in rsa_key) {\n      if (rsa_key.hasOwnProperty(name)) {\n        rk[name] = rsa_key[name];\n      }\n    }\n    config = getSignConfig(alg);\n    if (!rk.alg && alg) {\n      rk.alg = alg;\n    }\n    jwk = Utils.convertRsaKey(rk, ["n", "e", "d", "p", "q", "dp", "dq", "qi"]);\n    jwk.ext = true;\n  }\n  return Jose.crypto.subtle.importKey("jwk", jwk, config.id, false, [usage.privateKey]);\n};\n\n// Private functions\n\nUtils.isString = function(str) {\n  return ((typeof(str) == "string") || (str instanceof String));\n};\n\n/**\n * Takes an arrayish (an array, ArrayBuffer or Uint8Array)\n * and returns an array or a Uint8Array.\n *\n * @param arr  arrayish\n * @return array or Uint8Array\n */\nUtils.arrayish = function(arr) {\n  if (arr instanceof Array) {\n    return arr;\n  }\n  if (arr instanceof Uint8Array) {\n    return arr;\n  }\n  if (arr instanceof ArrayBuffer) {\n    return new Uint8Array(arr);\n  }\n  Jose.assert(false, "arrayish: invalid input");\n};\n\n/**\n * Checks if an RSA key contains all the expected parameters. Also checks their\n * types. Converts hex encoded strings (or numbers) to base64.\n *\n * @param rsa_key     RSA key in json format. Parameters can be base64 encoded,\n *                    strings or number (for \'e\').\n * @param parameters  array<string>\n * @return json\n */\nUtils.convertRsaKey = function(rsa_key, parameters) {\n  var r = {};\n  var alg;\n\n  // Check that we have all the parameters\n  var missing = [];\n  parameters.map(function(p){if (typeof(rsa_key[p]) == "undefined") { missing.push(p); }});\n\n  if (missing.length > 0) {\n    Jose.assert(false, "convertRsaKey: Was expecting " + missing.join());\n  }\n\n  // kty is either missing or is set to "RSA"\n  if (typeof(rsa_key.kty) != "undefined") {\n    Jose.assert(rsa_key.kty == "RSA", "convertRsaKey: expecting rsa_key[\'kty\'] to be \'RSA\'");\n  }\n  r.kty = "RSA";\n\n  try {\n    getSignConfig(rsa_key.alg);\n    alg = rsa_key.alg;\n  } catch (err) {\n    try {\n      getCryptoConfig(rsa_key.alg);\n      alg = rsa_key.alg;\n    } catch (er) {\n      Jose.assert(alg, "convertRsaKey: expecting rsa_key[\'alg\'] to have a valid value");\n    }\n  }\n  r.alg = alg;\n\n  // note: we punt on checking key_ops\n\n  var intFromHex = function(e) {\n    return parseInt(e, 16);\n  };\n  for (var i = 0; i < parameters.length; i++) {\n    var p = parameters[i];\n    var v = rsa_key[p];\n    if (p == "e") {\n      if (typeof(v) == "number") {\n        v = Utils.Base64Url.encodeArray(Utils.stripLeadingZeros(Utils.arrayFromInt32(v)));\n      }\n    } else if (/^([0-9a-fA-F]{2}:)+[0-9a-fA-F]{2}$/.test(v)) {\n      var arr = v.split(":").map(intFromHex);\n      v = Utils.Base64Url.encodeArray(Utils.stripLeadingZeros(arr));\n    } else if (typeof(v) != "string") {\n      Jose.assert(false, "convertRsaKey: expecting rsa_key[\'" + p + "\'] to be a string");\n    }\n    r[p] = v;\n  }\n\n  return r;\n};\n\n/**\n * Converts a string into an array of ascii codes.\n *\n * @param str  ascii string\n * @return Uint8Array\n */\nUtils.arrayFromString = function(str) {\n  Jose.assert(Utils.isString(str), "arrayFromString: invalid input");\n  var arr = str.split(\'\').map(function(c) {\n    return c.charCodeAt(0);\n  });\n  return new Uint8Array(arr);\n};\n\n/**\n * Converts a string into an array of utf-8 codes.\n *\n* @param str  utf-8 string\n * @return Uint8Array\n */\nUtils.arrayFromUtf8String = function(str) {\n  Jose.assert(Utils.isString(str), "arrayFromUtf8String: invalid input");\n  // javascript represents strings as utf-16. Jose imposes the use of\n  // utf-8, so we need to convert from one representation to the other.\n  str = unescape(encodeURIComponent(str));\n  return Utils.arrayFromString(str);\n};\n\n/**\n * Converts an array of ascii bytes into a string.\n *\n * @param arr  arrayish\n * @return ascii string\n */\nUtils.stringFromArray = function(arr) {\n  arr = Utils.arrayish(arr);\n  var r = \'\';\n  for (var i = 0; i < arr.length; i++) {\n    r += String.fromCharCode(arr[i]);\n  }\n\n  return r;\n};\n\n/**\n * Converts an array of ascii bytes into a string.\n *\n * @param arr  ArrayBuffer\n * @return ascii string\n */\nUtils.utf8StringFromArray = function(arr) {\n  Jose.assert(arr instanceof ArrayBuffer, "utf8StringFromArray: invalid input");\n\n  // javascript represents strings as utf-16. Jose imposes the use of\n  // utf-8, so we need to convert from one representation to the other.\n  var r = Utils.stringFromArray(arr);\n  return decodeURIComponent(escape(r));\n};\n\n/**\n * Strips leading zero in an array.\n *\n * @param arr  arrayish\n * @return array\n */\nUtils.stripLeadingZeros = function(arr) {\n  if (arr instanceof ArrayBuffer) {\n    arr = new Uint8Array(arr);\n  }\n  var is_leading_zero = true;\n  var r = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (is_leading_zero && arr[i] === 0) {\n      continue;\n    }\n    is_leading_zero = false;\n    r.push(arr[i]);\n  }\n  return r;\n};\n\n/**\n * Converts a number into an array of 4 bytes (big endian).\n *\n * @param i  number\n * @return ArrayBuffer\n */\nUtils.arrayFromInt32 = function(i) {\n  Jose.assert(typeof(i) == "number", "arrayFromInt32: invalid input");\n  Jose.assert(i == i | 0, "arrayFromInt32: out of range");\n\n  var buf = new Uint8Array(new Uint32Array([i]).buffer);\n  var r = new Uint8Array(4);\n  for (var j = 0; j < 4; j++) {\n    r[j] = buf[3 - j];\n  }\n  return r.buffer;\n};\n\n/**\n * Concatenates arrayishes.\n *\n * @param arguments two or more arrayishes\n * @return Uint8Array\n */\nUtils.arrayBufferConcat = function(/* ... */) {\n  // Compute total size\n  var args = [];\n  var total = 0;\n  for (var i = 0; i < arguments.length; i++) {\n    args.push(Utils.arrayish(arguments[i]));\n    total += args[i].length;\n  }\n  var r = new Uint8Array(total);\n  var offset = 0;\n  for (i = 0; i < arguments.length; i++) {\n    for (var j = 0; j < args[i].length; j++) {\n      r[offset++] = args[i][j];\n    }\n  }\n  Jose.assert(offset == total, "arrayBufferConcat: unexpected offset");\n  return r;\n};\n\nUtils.Base64Url = {};\n\n/**\n * Base64Url encodes a string (no trailing \'=\')\n *\n * @param str  string\n * @return string\n */\nUtils.Base64Url.encode = function(str) {\n  Jose.assert(Utils.isString(str), "Base64Url.encode: invalid input");\n  return btoa(str)\n    .replace(/\\+/g, "-")\n    .replace(/\\//g, "_")\n    .replace(/=+$/, "");\n};\n\n/**\n * Base64Url encodes an array\n *\n * @param arr array or ArrayBuffer\n * @return string\n */\nUtils.Base64Url.encodeArray = function(arr) {\n  return Utils.Base64Url.encode(Utils.stringFromArray(arr));\n};\n\n/**\n * Base64Url decodes a string\n *\n * @param str  string\n * @return string\n */\nUtils.Base64Url.decode = function(str) {\n  Jose.assert(Utils.isString(str), "Base64Url.decode: invalid input");\n  // atob is nice and ignores missing \'=\'\n  return atob(str.replace(/-/g, "+").replace(/_/g, "/"));\n};\n\nUtils.Base64Url.decodeArray = function(str) {\n  Jose.assert(Utils.isString(str), "Base64Url.decodeArray: invalid input");\n  return Utils.arrayFromString(Utils.Base64Url.decode(str));\n};\n\nUtils.sha256 = function(str) {\n  // Browser docs indicate the first parameter to crypto.subtle.digest to be a\n  // DOMString. This was initially implemented as an object and continues to be\n  // supported, so we favor the older form for backwards compatibility.\n  return Jose.crypto.subtle.digest({name: "SHA-256"}, Utils.arrayFromString(str)).then(function(hash) {\n    return Utils.Base64Url.encodeArray(hash);\n  });\n};\n\nUtils.isCryptoKey = function(rsa_key) {\n  // Some browsers don\'t expose the CryptoKey as an object, so we need to check\n  // the constructor\'s name.\n  if (rsa_key.constructor.name == \'CryptoKey\') {\n    return true;\n  }\n\n  // In the presence of minifiers, relying on class names can be problematic,\n  // so let\'s also allow objects that have an \'algorithm\' property.\n  if (rsa_key.hasOwnProperty(\'algorithm\')) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = Utils;\n\n\n/*-\n * Copyright 2014 Square Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Handles encryption.\n *\n * @param cryptographer  an instance of WebCryptographer (or equivalent).\n * @param key_promise    Promise<CryptoKey>, either RSA or shared key\n */\nJoseJWE.Encrypter = function(cryptographer, key_promise) {\n  this.cryptographer = cryptographer;\n  this.key_promise = key_promise;\n  this.userHeaders = {};\n};\n\n/**\n * Adds a key/value pair which will be included in the header.\n *\n * The data lives in plaintext (an attacker can read the header) but is tamper\n * proof (an attacker cannot modify the header).\n *\n * Note: some headers have semantic implications. E.g. if you set the "zip"\n * header, you are responsible for properly compressing plain_text before\n * calling encrypt().\n *\n * @param k  String\n * @param v  String\n */\nJoseJWE.Encrypter.prototype.addHeader = function(k, v) {\n  this.userHeaders[k] = v;\n};\n\n/**\n *\n * Visa-custom\n * returns the header value\n * \n * @param k  String\n */\nJoseJWE.Encrypter.prototype.getHeader = function(k) {\n  return this.userHeaders[k];\n};\n\n/**\n * Performs encryption.\n *\n * @param plain_text  utf-8 string\n * @return Promise<String>\n */\nJoseJWE.Encrypter.prototype.encrypt = function(plain_text) {\n  /**\n   * Encrypts plain_text with CEK.\n   *\n   * @param cek_promise  Promise<CryptoKey>\n   * @param plain_text   string\n   * @return Promise<json>\n   */\n  var encryptPlainText = function(cek_promise, plain_text) {\n    // Create header\n    var headers = {};\n    for (var i in this.userHeaders) {\n      headers[i] = this.userHeaders[i];\n    }\n\n    headers.alg = this.cryptographer.getKeyEncryptionAlgorithm();\n    headers.enc = this.cryptographer.getContentEncryptionAlgorithm();\n    var jwe_protected_header = Utils.Base64Url.encode(JSON.stringify(headers));\n\n    // Create the IV\n    var iv = this.cryptographer.createIV();\n\n    // Create the AAD\n    var aad = Utils.arrayFromString(jwe_protected_header);\n    plain_text = Utils.arrayFromUtf8String(plain_text);\n\n    return this.cryptographer.encrypt(iv, aad, cek_promise, plain_text).then(function(r) {\n      r.header = jwe_protected_header;\n      r.iv = iv;\n      return r;\n    });\n  };\n\n  var cek_promise, encrypted_cek;\n\n  if (this.cryptographer.getKeyEncryptionAlgorithm() == "dir") {\n    // with direct encryption, this.key_promise provides the cek\n    // and encrypted_cek is empty\n    cek_promise = Promise.resolve(this.key_promise);\n    encrypted_cek = [];\n  } else {\n    // Create a CEK key\n    cek_promise = this.cryptographer.createCek();\n\n    // Key & Cek allows us to create the encrypted_cek\n    encrypted_cek = Promise.all([this.key_promise, cek_promise]).then(function (all) {\n      var key = all[0];\n      var cek = all[1];\n      return this.cryptographer.wrapCek(cek, key);\n    }.bind(this));\n  }\n\n  // Cek allows us to encrypy the plain text\n  var enc_promise = encryptPlainText.bind(this, cek_promise, plain_text)();\n\n  // Once we have all the promises, we can base64 encode all the pieces.\n  return Promise.all([encrypted_cek, enc_promise]).then(function(all) {\n    var encrypted_cek = all[0];\n    var data = all[1];\n    return data.header + "." +\n      Utils.Base64Url.encodeArray(encrypted_cek) + "." +\n      Utils.Base64Url.encodeArray(data.iv) + "." +\n      Utils.Base64Url.encodeArray(data.cipher) + "." +\n      Utils.Base64Url.encodeArray(data.tag);\n  });\n};\n\n/* eslint-disable */\n/**\n * Syntactic sugar for Visa VDCP use-case.\n * expects an RSA key as a JS data object with 2 required fields:\n * @param {!string} rsaKeyId (REQUIRED)\n * @param {!object} rsaKey (REQUIRED)\n *    Requires:\n *      - `n` attribute (modulus)\n *      - `e` attribute (publicExponent)\n * @param {?string} scheme (optional) default \'RSA-OAEP-256\'\n * @param {?API} cryptoProvider (optional) window.crypto, node-webcrypto-ossl, node-webcrypto-pkcs11 etc.\n */\nvar PANJWE = function(rsaKeyId, rsaKey, scheme, cryptoProvider) {\n  scheme = scheme || \'RSA-OAEP-256\';\n\n  if (cryptoProvider) {\n    Jose.setCrypto(cryptoProvider);\n  }\n\n  var cryptographer = new Jose.WebCryptographer();\n\n  // set values for scheme and content encryption algorithm. They will be added to header by JoseJWE.Encrypter.encrypt\n  cryptographer.setKeyEncryptionAlgorithm(scheme);\n  cryptographer.setContentEncryptionAlgorithm(\'A256GCM\');\n\n  var rsa_key = Jose.Utils.importRsaPublicKey(rsaKey, scheme);\n  var encrypter = new JoseJWE.Encrypter(cryptographer, rsa_key);\n  encrypter.addHeader(\'kid\', rsaKeyId);\n  encrypter.addHeader(\'typ\', \'JOSE\');\n  encrypter.addHeader(\'iat\', new Date().getTime());\n\n  this.encrypter = encrypter;\n\n  // for testing, testing bundle includes decrypter mixins\n  if (JoseJWE.Decrypter) {\n    var private_rsa_key = Jose.Utils.importRsaPrivateKey(rsaKey, scheme);\n    var decrypter = new JoseJWE.Decrypter(cryptographer, private_rsa_key);\n    this.decrypter = decrypter;\n\n    /**\n     * encrypts text\n     * @param {!string} encryptedText string to decrypt\n     * @returns {Promise}\n     */\n    this.decrypt = function(encryptedText) {\n      return this.decrypter.decrypt(encryptedText);\n    };\n  }\n\n  /**\n   * sanity check\n   * @returns {object}\n   */\n  this.sanityCheck = function() {\n    return Jose.caniuse();\n  };\n\n  /**\n   * encrypts text\n   * @param {!string} cipherText string to encrypt\n   * @returns {Promise}\n   */\n  this.encrypt = function(cipherText) {\n    return this.encrypter.encrypt(cipherText);\n  };\n};\n\nmodule.exports.PANJWE = PANJWE;\nexports.PANJWE = PANJWE;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},690:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("\n;// CONCATENATED MODULE: ./benchmark/js/helpers/utils.js\nconst cel = tag => document.createElement(tag);\nconst utils_gel = id => document.getElementById(id);\nconst gecn = cls => document.getElementsByClassName(cls);\nconst qs = cls => document.querySelector(cls);\nconst qsa = cls => document.querySelectorAll(cls);\n\n\nfunction extractHostname(url) {\n  var hostname;\n  if (url.indexOf(\"//\") > -1) {\n    hostname = url.split('/')[2];\n  }\n  else {\n    hostname = url.split('/')[0];\n  }\n  //find & remove port number\n  hostname = hostname.split(':')[0];\n  //find & remove \"?\"\n  hostname = hostname.split('?')[0];\n  return hostname;\n}\n\nconst catchErr = err => {\n  console.trace(`[ERROR CAUGHT]`, err);\n  const header = cel('div');\n  const pre = cel('pre');\n  const trace = cel('pre');\n  const ts = new Date().toLocaleString();\n  header.innerHTML = `[${ts}] error caught:`;\n  utils_gel('error_log').appendChild(header);\n  \n  if (err.stack) {\n    trace.innerHTML = err.stack;\n    utils_gel('error_log').appendChild(trace);\n  } else {\n    pre.classList.add('error');\n    pre.innerHTML = (typeof err === 'string') ? err : JSON.stringify(err, null, 2);\n    utils_gel('error_log').appendChild(pre);\n  }\n  return err;\n}\n\n\nfunction serializeObject(obj) {\n  if (!obj) {\n    return '';\n  }\n\n  var s = [];\n\n  Object.keys(obj).forEach(function (key) {\n    if (obj[key] && obj[key].constructor === Array) {\n      obj[key].forEach(function (value) {\n        s.push(key + '=' + encodeURIComponent(value));\n      });\n    } else {\n      s.push(key + '=' + encodeURIComponent(obj[key]));\n    }\n  });\n\n  return s.join('&');\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/compliance-settings.js\n\n\nconst injectComplianceSettings = () => {\n  const terms = {\n    complianceType: \"TERMS_AND_CONDITIONS\",\n    uri: \"usa.visa.com/legal/checkout/terms-of-service.html\",\n  };\n  const privacy = {\n    complianceType: \"PRIVACY_POLICY\",\n    uri: \"usa.visa.com/legal/global-privacy-notice.html\",\n  };\n  const remember = {\n    complianceType: \"REMEMBER_ME\",\n    uri: \"visa.checkout.com/privacy\",\n  };\n\n  intentPayload.complianceSettings = {\n    complianceResources: [terms, privacy, remember]\n  };\n}\n\nconst removeComplianceSettings = () => {\n  intentPayload && delete intentPayload.complianceSettings;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/stubs/data.js\n\n\n\nlet data_initData;\nlet intentPayload;\n\nconst initDataRoot = {\n  srciTransactionId: \"replace me\",\n  // srciDpaId: \"DPAID\",\n  srcInitiatorId: \"[A-Fa-f0-9|A-Fa-f0-9]{8}\\\\-([A-Fa-f0-9|A-Fa-f0-9]{4}\\\\-){3}[A-Fa-f0-9|A-Fa-f0-9]{12}\",\n  dpaData: {\n    srcDpaId: \"SRCDPAID\",\n    dpaPresentationName: \"Disney Online\",\n    dpaUri: \"http://www.disneyonline.com\"\n  },\n  dpaTransactionOptions: {\n    dpaLocale: \"US\",\n    dpaAcceptedBillingCountries: [\"US\",\"CA\"],\n    dpaAcceptedShippingCountries: [\"US\",\"CA\"],\n    dpaBillingPreference: \"FULL\",\n    dpaShippingPreference: \"FULL\",\n    consumerNameRequested: true,\n    consumerEmailAddressRequested: true,\n    consumerPhoneNumberRequested: true,\n    paymentOptions: {\n      dpaDynamicDataTtlMinutes: 2,\n      dynamicDataType: \"DYNAMIC_CARD_SECURITY_CODE\",\n      dpaPanRequested: false\n    },\n    reviewAction: \"continue\",\n    transactionType: \"PURCHASE\",\n    orderType: \"REAUTHORIZATION\",\n    payloadTypeIndicator: \"SUMMARY\",\n    transactionAmount: {\n      transactionAmount: \"99.95\",\n      transactionCurrencyCode: \"USD\"\n    },\n    merchantOrderId: \"28b1b61b-bbec-4637-b78f-33babc3b5187\",\n    merchantCategoryCode: \"3000\",\n    merchantCountryCode: \"US\",\n    threeDsPreference: \"NONE\",\n    threeDsInputData: {\n      requestorId: \"requestorId\",\n      acquirerId: \"acquirerId\",\n      acquirerMid: \"acquirerMid\"\n    },\n    customInputData:{\n      checkoutOrchestrator: \"merchant\",//\"TESTING\", // 'merchant' is integrated exp\n      dpaIntegrationType: \"PSP\"\n    }\n  }\n};\n\nconst userInfo = {\n  identityProvider: \"SRC\",\n  identityValue: \"senthilr@mailinator.com\",\n  OTP_performed: false,\n  cardList_performed: false,\n  type: \"EMAIL\"\n};\n\nconst intentPayloadRoot = {\n  srcCorrelationId: \"\",\n  srciTransactionId: \"\",\n  srcDigitalCardId: \"\",\n  encryptedCard: \"\",\n  idToken: \"\",\n  windowRef: \"\",\n  consumer:{\n    consumerIdentity: {\n      identityProvider: \"SRC\", \n      identityType: \"EMAIL_ADDRESS\",\n      identityValue: \"ashok.vbox28@mailinator.com\"\n    },\n    mobileNumber: {\n      phoneNumber: \"4153334444\",\n      countryCode: \"1\"\n    },\n    emailAddress: \"ashok.vbox28@mailinator.com\",\n    nationalIdentifier: \"USA\",\n    countryCode: \"US\",\n    languageCode: \"EN\",\n    firstName: \"PSP\",\n    lastName: \"Tester\",\n    fullName: \"Psp Tester\"\n  },\n  dpaTransactionOptions: {\n    dpaLocale: \"US\",\n    dpaAcceptedBillingCountries: [\"US\",\"CA\"],\n    dpaAcceptedShippingCountries: [\"US\",\"CA\"],\n    dpaBillingPreference: \"ALL\",\n    dpaShippingPreference: \"ALL\",\n    consumerNameRequested: true,\n    consumerEmailAddressRequested: true,\n    consumerPhoneNumberRequested: true,\n    paymentOptions: {\n      dpaDynamicDataTtlMinutes: 2,\n      dynamicDataType: \"TAVV\",\n      dpaPanRequested: false\n    },\n    reviewAction: \"continue\",\n    checkoutDescription: \"Sample checkout\",\n    transactionType: \"PURCHASE\",\n    orderType: \"REAUTHORIZATION\",\n    payloadTypeIndicator: \"SUMMARY\",\n    transactionAmount: {\n      transactionAmount: \"99.95\",\n      transactionCurrencyCode: \"USD\"\n    },\n    merchantOrderId: \"ABC12345\",\n    merchantCategoryCode: \"merchantCategoryCode\",\n    merchantCountryCode: \"US\",\n    threeDsInputData: {\n      requestorId: \"requestorId\",\n      acquirerId: \"acquirerId\",\n      acquirerMid: \"acquirerMid\"\n    },\n    customInputData:{\n      dpaIntegrationType:\"PSP\"\n    }\n  },\n  payloadTypeIndicatorCheckout: \"SUMMARY\", // FULL\n  recipientIdPayload: \"\",\n  assuranceData: {\n    verificationData:[{\n      verificationType: \"CARDHOLDER\",\n      verificationEntity: \"01\",\n      verificationMethod: \"01\",\n      verificationresponses: \"01\",\n      verificationResults: \"01\",\n      verificationTimestamp: \"1646416550\"\n    }]\n  },\n  srciActionCode: \"NEW_USER\" \n};\n\nlet srcProfiles = [];\n\nconst benchmark = {\n  init: 0,\n  isRecognized: 0,\n  identityLookup: 0,\n  initiateIdentityValidation: 0,\n  // UIUX_to_OTP: 0,\n  completeIdentityValidation: 0,\n  getSrcProfile: 0,\n  // UIUX_to_cardList: 0,\n  checkout: 0,\n  addCard: 0,\n  enrollUser: 0,\n  unbind: 0,\n};\n\nconst benchmarkState = {\n  sdkUrl: '',\n};\n\nconst resetFlow = () => {\n  console.info('RESET')\n  data_initData = Object.assign({}, initDataRoot);\n  intentPayload = Object.assign({}, intentPayloadRoot);\n  userInfo.OTP_performed = false;\n  userInfo.cardList_performed = false;\n  srcProfiles = [];\n};\n\n\nconst getIntentPayload = () => {\n  if (!intentPayload) {\n    intentPayload = Object.assign({}, intentPayloadRoot);\n  }\n\n  if (utils_gel('compliance_toggle').checked) {\n    injectComplianceSettings();\n  } else {\n    removeComplianceSettings();\n  }\n\n  return intentPayload;\n};\n\nconst setIntentPayload = payload => {\n  intentPayload = payload;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/email.js\n\n\n\n// To autofill the email in idlookup field\nfunction emailSetter(email) {\n  if (email) {\n    const em = utils_gel('emailInput');\n    em.value = email;\n\n    autoIdLookupEmailAddress(email);\n    autoFillEmailAddressInCheckoutApirequest(email);\n  }\n}\n\nfunction setHistoricalEmails() {\n  let emailHistorical = localStorage.getItem('email_historical');\n\n  if (emailHistorical) {\n    const history = utils_gel('email_historical');\n    emailHistorical = JSON.parse(emailHistorical);\n\n    // remove existing node\n    qsa('#email_historical option').forEach(node => {\n      node.parentNode.removeChild(node);\n    });\n\n    for (let i=0; i<emailHistorical.length; i++) {\n      let option = cel('option');\n      option.value = emailHistorical[i];\n      option.className = 'historical_email_option';\n      option.appendChild(document.createTextNode(emailHistorical[i]));\n\n      history.appendChild(option);\n    }\n  }\n}\n\n// update email in idLookup payload\nfunction autoIdLookupEmailAddress(email) {\n  let emailHistorical;\n\n  if (userInfo) {\n    userInfo.identityValue = email;\n    localStorage.setItem('email', email);\n\n    emailHistorical = localStorage.getItem('email_historical');\n\n    if (!emailHistorical) {\n      emailHistorical = [];\n    } else {\n      emailHistorical = JSON.parse(emailHistorical);\n    }\n\n    if (emailHistorical.indexOf(email) < 0) {\n      emailHistorical.push(email);\n      localStorage.setItem('email_historical', JSON.stringify(emailHistorical));\n      setHistoricalEmails();\n    }\n  }\n}\n\n// To autofill the email in checkout field\nfunction autoFillEmailAddressInCheckoutApirequest(email) {\n  const intentPayload = getIntentPayload();\n  \n  if (intentPayload) {\n    intentPayload.consumer.emailAddress = emailInput.value;\n    intentPayload.consumer.consumerIdentity.identityValue = emailInput.value;\n    intentPayload.consumer.mobileNumber.phoneNumber = '4153334444';\n  }\n}\n\n\nconst setEmailErrorMessage = (msg) => {\n  gel('email_error_message').innerHTML = msg;\n}\n\n// bootstrap\nutils_gel('emailInput').onblur = function populateEmail() {\n  const email = this.value;\n  emailSetter(email);\n}\nutils_gel('emailInput').onfocus = () => {\n  utils_gel('email_error_message').innerHTML = '';\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/can-use-test-cards-api.js\nconst canUseTestCardApi = () => {\n  switch (window.location.hostname) {\n    // case 'localhost':\n    case 'cnojima.github.io':\n      return false;\n  }\n\n  return true;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/components/card-bin-selector/index.js\n\n\n\nconst defaultBin = '414718';\nconst bins = {\n  '-- 400552 (non-tokenizable?)': '400552',\n  '-- 420767 (tokenizable)': '420767',\n  '-- 414718 (tokenizable)': '414718'\n};\n\nconst handleBinSelection = e => {\n  localStorage.setItem('binRange', e.target.value);\n}\n\nconst initBinSelector = () => {\n  const binRange = localStorage.getItem('binRange');\n  const select = utils_gel('bin_range');\n\n  for (let k in bins) {\n    const option = document.createElement('option');\n    option.value = bins[k];\n    option.label = k;\n\n    if (binRange && binRange === bins[k]) {\n      option.selected = true;\n    } else if (!binRange && bins[k] === defaultBin) {\n      option.selected = true;\n    }\n\n    select.appendChild(option);\n  }\n\n  select.addEventListener('change', handleBinSelection);\n\n  if (canUseTestCardApi()) {\n    utils_gel('bin_selector').style.display = 'block';\n  }\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/stubs/environment-keys.js\nconst environmentKeys = {\n  'QaPerf': {\n    srcInitiatorId: '7HKFOSV9G52FPO4VGB9211lO1Y3E5OP_TufMQmyCjWJKy1N64',\n    panEncryptionId: '7HKFOSV9G52FPO4VGB9211lO1Y3E5OP_TufMQmyCjWJKy1N64',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'QaPerf_DockerEE': {\n    srcInitiatorId: '7HKFOSV9G52FPO4VGB9211lO1Y3E5OP_TufMQmyCjWJKy1N64',\n    panEncryptionId: '7HKFOSV9G52FPO4VGB9211lO1Y3E5OP_TufMQmyCjWJKy1N64',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'DEVWKSPCE': {\n    srcInitiatorId: '3EY722QTUPZCY5X5A3IY21OLy4te0ZTO9KB3PJMW9ugdQ3ZAQ',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'QAWKSPCE': {\n    srcInitiatorId: '3EY722QTUPZCY5X5A3IY21OLy4te0ZTO9KB3PJMW9ugdQ3ZAQ',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: '07750595-fcc1-0d2e-7388-11c5769e0201'\n  },\n  \n  'Vbox444_Container': {\n    srcInitiatorId: '3EY722QTUPZCY5X5A3IY21OLy4te0ZTO9KB3PJMW9ugdQ3ZAQ',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: '07750595-fcc1-0d2e-7388-11c5769e0201'\n  },\n  'Vbox671': {\n    srcInitiatorId: 'SWOEJX022ZPXXQD3S8YN11FD4oyBr5InbFWGnFxrFGXUDjN6I',\n    panEncryptionId: 'IPW4W1DX5D4N5E8LMAC6115la44Nu9zYob_bgrg5EUMksbgT4',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Vbox28': {\n    srcInitiatorId: 'J6XDQQQZ5CDSSJK0462Y11v-YWWFJ4O8G-3nTFwIIDwmqBLMM',\n    panEncryptionId: 'J6XDQQQZ5CDSSJK0462Y11v-YWWFJ4O8G-3nTFwIIDwmqBLMM',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Vbox441': {\n    srcInitiatorId: '32V3GLT7MFPQJXXZCOTD119LoKEpmlgPaIAiSeMJFQQ9mUg-4',\n    panEncryptionId: '32V3GLT7MFPQJXXZCOTD119LoKEpmlgPaIAiSeMJFQQ9mUg-4',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Vbox442_Adyen': {\n    srcInitiatorId: '8YPW4SHDFX5VLZ8MLHDB218WlvAwM4z2Pg1r_DpZY8lNaibec',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Vbox442': {\n    srcInitiatorId: '3EY722QTUPZCY5X5A3IY21OLy4te0ZTO9KB3PJMW9ugdQ3ZAQ',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Vbox444_ExternalSrci': {\n    srcInitiatorId: '3EY722QTUPZCY5X5A3IY21OLy4te0ZTO9KB3PJMW9ugdQ3ZAQ',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Vbox444_Adyen': {\n    srcInitiatorId: '8YPW4SHDFX5VLZ8MLHDB218WlvAwM4z2Pg1r_DpZY8lNaibec',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Vbox444_PSP': {\n    srcInitiatorId: 'TC03UO784YYUIR3BANUG11WE2pQEWgr5PpuIVbUZFB_oZLOco',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Vbox444_3DS': {\n    srcInitiatorId: '8YPW4SHDFX5VLZ8MLHDB218WlvAwM4z2Pg1r_DpZY8lNaibec',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: 'ab1a4e6f-956c-a793-721f-133336dc270'\n  },\n  'Vbox734': {\n    srcInitiatorId: 'KXL3FF1JNNZU0ORB0CDD11TQ5wPxPqdUH4c4k8PFKp7gFOzm8',\n    panEncryptionId: 'SYZ0E01PYHJ4ZSXYU8FH11c8IkQyrrwgHsh3rWjAFhOc1J-lE',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Vbox734_PSP': {\n    srcInitiatorId: 'K02YEQRO0LLJBLK6XD0G11vP2Z_PwMKGR4qSeJW8TCQhJUdbk',\n    panEncryptionId: 'SYZ0E01PYHJ4ZSXYU8FH11c8IkQyrrwgHsh3rWjAFhOc1J-lE',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Vbox462': {\n    srcInitiatorId: 'IBZOZYMVSY9JYT6WJVL7111CUWmhc5egkwGjHgBD_kQto66S8',\n    panEncryptionId: 'IBZOZYMVSY9JYT6WJVL7111CUWmhc5egkwGjHgBD_kQto66S8',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'QAINT': {\n    srcInitiatorId: 'D257GCAOR3JGPTGACON811hN5odBtBaW0Z18OnXh3bhwFuH18',\n    panEncryptionId: 'D257GCAOR3JGPTGACON811hN5odBtBaW0Z18OnXh3bhwFuH18',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'CERT': {\n    srcInitiatorId: '3WQRGUSY6CESJS2KQSW811JXx9P1JLs2DrbOKqU9EXbfjreUo',\n    panEncryptionId: '3WQRGUSY6CESJS2KQSW811JXx9P1JLs2DrbOKqU9EXbfjreUo',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'CERT_OCC': {\n    srcInitiatorId: '3WQRGUSY6CESJS2KQSW811JXx9P1JLs2DrbOKqU9EXbfjreUo',\n    panEncryptionId: '3WQRGUSY6CESJS2KQSW811JXx9P1JLs2DrbOKqU9EXbfjreUo',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'CERT_OCE': {\n    srcInitiatorId: '3WQRGUSY6CESJS2KQSW811JXx9P1JLs2DrbOKqU9EXbfjreUo',\n    panEncryptionId: '3WQRGUSY6CESJS2KQSW811JXx9P1JLs2DrbOKqU9EXbfjreUo',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'CERT1': {\n    srcInitiatorId: 'B8VF3G544MK90PMQAG3I11nR-eWQmj3uhfs9dQXPEdjbmrpfo',\n    panEncryptionId: 'L9A8ACW4DCTK83U2T4SB11NhQpVkp7mAh9NtnN5ms0wYu7wo0',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'SandBox': {\n    srcInitiatorId: 'V6YPL0DFJ2V56HIH6Q3F133fbZWyAyIHjWVSecx6KMF6iTHGM',\n    panEncryptionId: 'V6YPL0DFJ2V56HIH6Q3F133fbZWyAyIHjWVSecx6KMF6iTHGM',\n    srciDpaId: 'matestdpa2',\n    srcDpaId: ''\n  },\n  'Vbox444_Container_DockerEE': {\n    srcInitiatorId: '3EY722QTUPZCY5X5A3IY21OLy4te0ZTO9KB3PJMW9ugdQ3ZAQ',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: ''\n  },\n  'Qa_OpenShift': {\n    srcInitiatorId: '3EY722QTUPZCY5X5A3IY21OLy4te0ZTO9KB3PJMW9ugdQ3ZAQ',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: '07750595-fcc1-0d2e-7388-11c5769e0201'\n  },\n  'Qa_DockerEE': {\n    srcInitiatorId: '3EY722QTUPZCY5X5A3IY21OLy4te0ZTO9KB3PJMW9ugdQ3ZAQ',\n    panEncryptionId: 'J5C09XBZA6G891K4FGG611NiZViO3l905GPqA088DCEBKklZk',\n    srciDpaId: 'DPAID',\n    srcDpaId: '07750595-fcc1-0d2e-7388-11c5769e0201'\n  }\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/get-keys.ts\n\n\nvar getFromLocalStorage = function (key) {\n    var values = localStorage.getItem(key);\n    if (values) {\n        return JSON.parse(values);\n    }\n    return {};\n};\nvar getEnvironmentKeys = function () {\n    return getFromLocalStorage('environmentKeys');\n};\nvar getEncryptionKeys = function () {\n    return getFromLocalStorage('keys');\n};\nvar getEnvironment = function (key) {\n    var envKeys = (environmentKeys) ? environmentKeys : getEnvironmentKeys();\n    var genericKey = key.replace(/SDKv[0-9].*$/i, '').trim();\n    if (envKeys[genericKey]) {\n        return envKeys[genericKey];\n    }\n    return null;\n};\nvar getMerchantApiKey = function () {\n    if (initData.srcInitiatorId)\n        return initData.srcInitiatorId;\n    return null;\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/uuid.js\n\n\n\n// Method to generate random UUID\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n      v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n// To autofill UUID on every page refresh\nfunction autoFillUUID(key) {\n  const intentPayload = getIntentPayload();\n  const srciTransactionId = uuidv4();\n  const env = getEnvironment(key);\n  const bad = ['srcDpaId', 'panEncryptionId'];\n  \n  data_initData.srciTransactionId = srciTransactionId;\n  intentPayload.srciTransactionId = srciTransactionId;\n\n  for (let k in env) {\n    if (bad.indexOf(k) === -1)\n      data_initData[k] = env[k];\n  }\n\n  // remove srcDpaID from initdata - /enroll returns 403 if present\n  delete data_initData.srcDpaId;\n  delete data_initData.dpaData.srcDpaId;\n}\n\nconst autoFillUUIDAutomation = () => {\n  const intentPayload = getIntentPayload();\n  const srciTransactionId = uuidv4();\n  let dpaId = localStorage.getItem('srciDpaId');\n\n  if (!dpaId) {\n    console.warn(' --- srcDpaId not set - using default DPAID');\n    dpaId = 'DPAID';\n  }\n\n  data_initData.srciTransactionId = srciTransactionId;\n  intentPayload.srciTransactionId = srciTransactionId;\n  data_initData.srcInitiatorId = localStorage.getItem('initiatorId');\n  data_initData.srciDpaId = dpaId;\n\n  delete data_initData.apikey;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/ui/reset-ui.js\n\n\n\n\n\nconst targets = [\n  'init_complete', 'is_recognized_complete', 'auth_complete', 'get_src_profile_complete', 'checkout_complete', 'unbind_complete'\n];\n\nconst resetUi = () => {\n  window.otp_listener = false;\n\n  targets.forEach(id => {\n    utils_gel(id).checked = false;\n    utils_gel(`${id}_timing`).innerHTML = '';\n  });\n\n  Array(qsa('.messaging')).forEach(el => {\n    el.innerHTML = '';\n  });\n\n  utils_gel('auth_breakdown').innerHTML = '';\n  utils_gel('error_log').innerHTML = '';\n  utils_gel('benchmark_data').value = '';\n  utils_gel('otp_entry').style.display = 'none';\n  utils_gel('pass_fail').innerHTML = '';\n  utils_gel('pass_fail').classList.remove('pass', 'fail');\n\n  for (let k in benchmark) {\n    benchmark[k] = 0;\n  }\n\n  // BIN selector\n  if (canUseTestCardApi()) {\n    utils_gel('bin_selector').style.display = 'block';\n  }\n\n  // compliance cb\n  if (utils_gel('compliance_toggle').checked) {\n    console.log('...injectComplianceSettings');\n    injectComplianceSettings();\n  } else {\n    console.log('...removeComplianceSettings');\n    removeComplianceSettings();\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/validate-start-options.ts\n\n\nvar validate = function () {\n    // manual, don't use helpers here\n    var flowType = qs('input[name=\"flow_selector\"]:checked');\n    if (!flowType) {\n        catchErr('Select a Flow to start.');\n        return false;\n    }\n    // edge-cases, no localStorage values set\n    var sdkUrl = utils_gel('sdk_picker_v3');\n    var email = utils_gel('emailInput');\n    var returningFlow = utils_gel('returning_flow');\n    var panJson = utils_gel('pan_json');\n    if (!localStorage.getItem('sdk') && sdkUrl) {\n        localStorage.setItem('sdk', sdkUrl.value);\n    }\n    if (!localStorage.getItem('email') && email) {\n        if (email) {\n            localStorage.setItem('email', email.value);\n        }\n    }\n    if (returningFlow.checked === false &&\n        !canUseTestCardApi() && panJson.value === '') {\n        catchErr('Please generate a test card before proceeding.');\n        return false;\n    }\n    return true;\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/get-root-domain.js\n/*\n  cannot import util from visa-sdk; copied util over for now\n*/\n\n\n// This dummy URL is updated by a deploy script based on the environment. E.g.\n// when deploying to production, CI replaces dev.www.v.me with\n// secure.checkout.visa.com, but when deploying to cert, it will be\n// cert.secure.checkout.visa.com.\nconst STATIC_ROOT_DOMAIN = 'https://dev.www.v.me';\n\nconst sdkScriptRegex =\n  /^https:\\/\\/[\\w-\\.]+\\.?\\.visa\\.com\\/checkout\\-widget\\/resources\\/js\\/src-i-adapter\\/visa[\\-sS]{1,2}dk\\.js/;\n\nfunction getSDKScriptEl() {\n  const scripts = document.querySelectorAll('script');\n\n  for (const script of scripts) {\n    if (script.src.match(sdkScriptRegex)) {\n      return script;\n    }\n  }\n\n  return null;\n}\n\nconst assetsMap = {\n  '//assets.secure.checkout.visa.com': '//secure.checkout.visa.com',\n  '//cert-assets.secure.checkout.visa.com': '//cert.secure.checkout.visa.com',\n  '//sandbox-assets.secure.checkout.visa.com': '//sandbox.secure.checkout.visa.com'\n};\n\nfunction mapAssetsUrl(url) {\n  const assetDomains = Object.keys(assetsMap);\n\n  for (const assetDomain of assetDomains) {\n    if (url.indexOf(assetDomain) !== -1) {\n      return url.replace(assetDomain, assetsMap[assetDomain]);\n    }\n  }\n\n  return url;\n}\n\n// Root domain is updated by a deploy script based on the environment. E.g.\n// when deploying to production, CI replaces dev.www.v.me with\n// secure.checkout.visa.com, but when deploying to cert, CI uses\n// cert.secure.checkout.visa.com.\nconst dummyUrlHash = 'aHR0cHM6Ly9kZXYud3d3LnYubWU'; // btoa('https://dev.www.v.me')\nconst wasDummyUrlReplaced = STATIC_ROOT_DOMAIN !== window.atob(dummyUrlHash);\n\nfunction getRootDomain() {\n  if (wasDummyUrlReplaced) {\n    return STATIC_ROOT_DOMAIN;\n  }\n\n  // In container deployments, the dummy url may not have been replaced. In this\n  // case we need to determine the environment url from the visaSdk.js script tag.\n\n  const sdkScriptEl = getSDKScriptEl();\n\n  if (sdkScriptEl) {\n    return mapAssetsUrl(sdkScriptEl.src.split('/', 3).join('/'));\n  }\n\n  // Default to the prod URL for any abnormal integration.\n  return 'https://secure.checkout.visa.com';\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/init.js\n\n\n\n\n\n\n\n\nasync function init(adapter, startTime) {\n  console.log('[INIT] start', getRootDomain());\n  // const apikey = getMerchantApiKey();\n  // if (apikey) {\n  //   initData.apikey = apikey;\n  // }\n\n  // merge in environment DPA options\n\n\n\n  console.log('[INIT_DATA]', data_initData);\n\n  await adapter.init(data_initData).then((response) => {\n    const endTime = Date.now();\n    benchmark.init = endTime - startTime;\n    console.log(`[init] ttaken: ${(benchmark.init)}ms`, response);\n\n    if (!Object.keys(response).length) {\n      utils_gel('init_complete').checked = true;\n      utils_gel('init_complete_timing').innerHTML = `${(benchmark.init)}ms`;\n    } else if (response.error) {\n      setPassFail('FAIL');\n      throw new Error(JSON.stringify(response, null, 2));\n    } else {\n      console.error('init failed, check console');\n    }\n\n    return response;\n  }).catch(catchErr);\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/is-recognized.js\n\n\n\n\n\nasync function isRecognized(adapter) {\n  console.log('[RECOGNIZE] start');\n  const startTime = Date.now();\n\n  let token;\n  const response = await adapter.isRecognized().catch(catchErr);\n  const endTime = Date.now();\n\n  benchmark.isRecognized = endTime - startTime;\n\n  utils_gel('is_recognized_complete').checked = true;\n  utils_gel('is_recognized_complete_timing').innerHTML = `${benchmark.isRecognized}ms`;\n\n  if (response.idTokens) {\n    token = response.idTokens[0];\n  } else if (response.recognized === false) {\n    utils_gel('is_recognized_complete_timing').innerHTML = `${benchmark.isRecognized}ms (unrecognized)`;\n  } else if (response.error) {\n    setPassFail('FAIL');\n    throw new Error(JSON.stringify(response, null, 2));\n  }\n\n  console.log(`[recognized] ttaken: ${(benchmark.isRecognized)}ms`);\n  return token;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/load-sdk.js\n\n\n\nconst loadSdk = (sdkUrl, callback) => {\n  const loadStart = Date.now();\n  let sdkMount = getSDKScriptEl();\n  let tag;\n\n  if (sdkMount) {\n    console.info('>>>> removing <script /> tag from prior load');\n    sdkMount.parentNode.removeChild(sdkMount);\n  }\n\n  tag = document.createElement(\"script\");\n  tag.src = sdkUrl;\n  tag.type = 'text/javascript';\n  tag.async = false;\n  tag.onload = () => {\n    callback(loadStart).catch(err => {\n      utils_gel('error_log').innerHTML = err;\n    });\n  }\n\n  const head = document.getElementsByTagName(\"head\")[0];\n  (head || document.body).appendChild(tag);\n}\n\n/* harmony default export */ const load_sdk = (loadSdk);\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/update-benchmarks.js\n\n\n\nlet startTime;\n\nconst setStartTime = () => startTime = Date.now();\n\nconst updateBenchmarks = () => utils_gel('benchmark_data').value = JSON.stringify(benchmark, null, 2);\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/fetch.js\nconst genId = () => Math.random().toString(36).substring(7);\nconst systemCorrelationId = `1_1492561111_766_48_${genId()}_CHECKOUT-WIDGET`;\nconst systemSessionId = `vme_qa_001${genId()}`;\n\nvar fetchReq = function (options) {\n  const {\n    url,\n    body,\n    method,\n    headers\n  } = options;\n  headers['X-CORRELATION-ID'] = systemCorrelationId;\n  headers['dfpSessionId'] = systemSessionId;\n  headers['X-THMID'] = systemSessionId;\n\n  const contentType = headers['Content-Type'];\n  let finalBody = {};\n\n  if (contentType && contentType.includes('x-www-form-urlencoded')) {\n    finalBody = fetch_serializeObject(body);\n  } else {\n    finalBody = JSON.stringify(body);\n  }\n  return fetch(\n      url,\n      Object.assign({}, {\n        body: finalBody,\n        credentials: 'same-origin',\n        headers: headers,\n        method\n      })\n    )\n    .then(res => handleJsonResponse(res))\n    .then(data => data)\n    .catch(error => {return error});\n};\n\nfunction fetch_uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n      v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nfunction handleJsonResponse(res) {\n  const headers = {};\n  res.headers.forEach(function (v, k) {\n    headers[k] = v;\n  });\n  // console.log('headers - ' + JSON.stringify(headers));\n  return (\n    res\n    .json()\n    .then(function (data) {\n      console.log('data', data);\n      return {\n        data: data,\n        headers: headers\n      }\n    })\n    .catch(function () {\n      return {\n        headers: headers\n      }\n    }))\n};\n\n\nfunction fetch_serializeObject(obj) {\n  if (!obj) {\n    return '';\n  }\n\n  var s = [];\n\n  Object.keys(obj).forEach(function (key) {\n    if (obj[key] && obj[key].constructor === Array) {\n      obj[key].forEach(function (value) {\n        s.push(key + '=' + encodeURIComponent(value));\n      });\n    } else {\n      s.push(key + '=' + encodeURIComponent(obj[key]));\n    }\n  });\n\n  return s.join('&');\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/get-otp.js\n\n\n\n\n\nlet isQAPerf = false;\nconst useProxy = true;\n\nasync function getOTP(email) {\n  console.info('@getOTP - attempting to retrieve OTP code via API');\n\n  isQAPerf = localStorage.getItem('sdk').indexOf('qaperf') > -1;\n\n  if (isQAPerf) {\n    const res = await fetch(`/id?email=${email}`).then(handleJsonResponse);\n\n    if (res.data.uuid) {\n      // sha256 hash of UUID + email\n      // no transpile of node code, leverage simple API\n      const hash = await fetch(`/sha?s=${res.data.uuid}${email.toLowerCase()}`).then(handleJsonResponse);\n      // base64 encode shasum\n      try {\n        const encrypted = btoa(hash.data.sha256);\n        const otpBody = await fetch(`/otp?encrypted=${encrypted}`).then(handleJsonResponse);\n// console.log('otp', otpBody);Q\n\n        if (otpBody.data.otpValue) {\n          console.log(`got OTP value [${otpBody.data.otpValue}]`);\n          return otpBody.data.otpValue;\n        }\n      } catch (err) {\n        setPassFail('FAIL');\n        throw new Error(err);\n      }\n\n      setPassFail('FAIL');\n      throw new Error(`OTP fetch failed`);\n    }\n  } else {\n    let token;\n    const proxy = `${window.location.protocol}//${window.location.hostname}:${window.location.port}/proxy`;\n    const url = 'https://vbox671.secure.checkout.visa.com/srcsdktester/generateOtp';\n  \n    const environment = extractHostname(benchmarkState.sdkUrl);\n    // console.log(\"Environment:\", environment);\n  \n    // Make indirect call to get OTP\n    const options = {\n      method: 'GET',\n      url: useProxy ? `${proxy}?url=${url}` : url,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=UTF-8',\n        'envn': environment,\n        'email': email,\n      }\n    };\n\n    const result = await fetchReq(options).catch(err => {\n      console.error('getOTP error:', err);\n    });\n    if (result.data.otpValue) {\n      return result.data.otpValue;\n    } else {\n      console.warn(`could not autoget OTP code from [${url}]`);\n    }\n  }\n\n  return null;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/can-use-otp-api.js\n\nconst canUseOtpApi = () => {\n  const hostname = window.location.hostname;\n  const sdkUrl = localStorage.getItem('sdk');\n\n  switch(true) {\n    case (hostname.indexOf('github') > -1):\n    case (hostname.indexOf('heroku') > -1):\n    case (sdkUrl && sdkUrl.indexOf('qaperf') > -1):\n    case (hostname.indexOf('localhost') > -1):\n    case (hostname.indexOf('127.0.0.1') > -1):\n      return false;\n  }\n\n  return true;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/flows/auth-flow.js\n\n\n\n\n\n\n\nlet auth_flow_isQAPerf;\n\nwindow.otp_listener = false;\n\n\n\nasync function submitOtp(otpCode) {\n  console.info('---- submitOtp');\n  const completeIdentityValidationStart = Date.now();\n  const res = await completeIdentityValidation(window.c2p_adapter, {\n    validationData: otpCode\n  }).catch(catchErr);\n  benchmark.completeIdentityValidation = Date.now() - completeIdentityValidationStart;\n\n  utils_gel('auth_complete').checked = true;\n  utils_gel('auth_complete_timing').innerHTML = `${(benchmark.identityLookup + benchmark.initiateIdentityValidation + benchmark.completeIdentityValidation) / 1000}s`;\n  utils_gel('auth_breakdown').innerHTML = `[ identityLookup: ${benchmark.identityLookup}ms ]<br/>[ initiateIdentityValidation: ${benchmark.initiateIdentityValidation}ms ]<br/>[ completeIdentityValidation: ${benchmark.completeIdentityValidation}ms ]`;\n\n  console.log(`/probe`, res);\n  return res;\n}\n\nasync function completeIdentityValidation(adapter, code) {\n  console.log(\"@completeIdentityValidation - Validation Data => \", code);\n  const response = await adapter.completeIdentityValidation(code).catch(catchErr);\n  console.log(`---- completeIdentityValidation - response`, response);\n\n  if (response.error) {\n    return null;\n  } else if (response['reason']) {\n    console.log('Unable to verify OTP: %o', response);\n  } else {\n    console.log('Response from Verify OTP: %o', response);\n  }\n  return response;\n}\n\nasync function initiateIdentityValidation(adapter) {\n  console.log('@initiateIdentityValidation');\n  return await adapter.initiateIdentityValidation().then((response) => {\n    console.log(`response from initiateIdentyValidation`, response);\n    if (response['reason']) {\n      setPassFail('FAIL');\n      throw new Error('Unable to initialize Identity validation, error: %o', response);\n    }\n    return response;\n  }).catch(catchErr);\n}\n\n\n\nasync function authFlow(afterAuth, updateBenchmarks) {\n  console.log('[AUTH_FLOW] start');\n  let otpCode;\n  const email = localStorage.getItem('email');\n\n  // idLookup\n  const identityLookupStart = Date.now();\n\n  console.log('-- starting async identityLookup');\n  const res = await window.c2p_adapter.identityLookup({\n    identityProvider: \"SRC\",\n    identityValue: email,\n    type: \"EMAIL\"\n  }).catch(catchErr);\n  console.log('-- identityLookup return', res);\n\n  benchmark.identityLookup = Date.now() - identityLookupStart;\n  updateBenchmarks();\n\n  if (res.error) {\n    setPassFail('FAIL');\n    throw new Error(JSON.stringify(res, null, 2));\n  } else if (res.consumerPresent || res.accessToken) {\n    // reissuance\n    console.log('--- reissuance');\n    const initiateIdentityValidationStart = Date.now();\n    const res = await initiateIdentityValidation(window.c2p_adapter).catch(catchErr);\n    benchmark.initiateIdentityValidation = Date.now() - initiateIdentityValidationStart;\n    benchmark.UIUX_to_OTP = Date.now() - startTime;\n    userInfo.OTP_performed = true;\n    updateBenchmarks();\n\n    if (res.error) {\n      setPassFail('FAIL');\n      throw new Error(JSON.stringify(res, null, 2));\n    } else if (res !== false) {\n      if (canUseOtpApi() === false) {\n        if (window.otp_listener === false) {\n          console.log('instantiating manual OTP form')\n          window.otp_listener = true;\n\n          async function handler(e) {\n            const otp = utils_gel('otp_value').value;\n            console.log(`OTP submitted [${otp}]`);\n\n            if (otp) {\n              const res = await submitOtp(otp).catch(catchErr);\n              updateBenchmarks();\n\n              if (res) {\n                // visa-sdk > 23.07.00 no longer returns idToken?\n                const token = res?.idToken || undefined;\n                await afterAuth(window.c2p_adapter, token).catch(catchErr);\n                // return res;\n              }\n            } else {\n              catchErr('No OTP value detected.')\n            }\n          };\n\n          const globalHandler = async e => {\n            if (e.srcElement.id === 'otp_submit') {\n              await handler(e);\n            }\n          }\n\n          // show OTP field + button\n          window._manual_otp = true;\n          utils_gel('otp_entry').style.display = 'block';\n          document.addEventListener('click', globalHandler);\n        }\n        return 'manual';\n      } else {\n        console.log('--- automatic OTP shown');\n        otpCode = await getOTP(email);\n\n        // manually enter for sandbox+\n        if (!otpCode) {\n          console.log('--- prompt OTP shown');\n          otpCode = await prompt('Enter OTP');\n        }\n        return submitOtp(otpCode);\n      }\n    }\n  }\n\n  console.info('[AUTH_FLOW] consumer not present');\n  return res;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/checkout.js\n\n\n\n\n\n\nasync function checkout(adapter) {\n  console.log('[CHECKOUT] start');\n\n  const intentPayload = getIntentPayload();\n  autoFillEmailAddressInCheckoutApirequest(utils_gel('emailInput').value);\n\n  console.log('-- intent payload', intentPayload);\n  const enrollStartTime = Date.now();\n  const response = await adapter.checkout(intentPayload);\n  const enrollEndTime = Date.now();\n\n  benchmark.checkout = enrollEndTime - enrollStartTime;\n\n  if (userInfo.cardList_performed === false && userInfo.OTP_performed === false) {\n    benchmark.UIUX_enrollNewUser = Date.now() - startTime;\n  }\n\n  console.log(`[checkout] ttaken: ${(benchmark.checkout)}ms`);\n  \n  if (response.error || response['reason']) {\n    setPassFail('FAIL');\n    throw new Error(JSON.stringify(response, null, 2));\n  } else {\n    utils_gel('checkout_complete').checked = true;\n    utils_gel('checkout_complete_timing').innerHTML = `${(benchmark.checkout)}ms`;\n  }\n  return response;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/get-src-profile.js\n\n\n\n\n\n\nasync function getSrcProfile(adapter, authToken) {\n  console.log('[GET_SRC_PROFILE] start');\n  const intentPayload = getIntentPayload();\n\n  const gspStartTime = Date.now();\n  const response = await adapter.getSrcProfile(authToken);\n  const gspEndTime = Date.now();\n  benchmark.getSrcProfile = gspEndTime - gspStartTime;\n  userInfo.cardList_performed = true;\n\n  if (userInfo.OTP_performed === false) {\n    // only mark TTFI for CL if OTP has not been sent/submitted\n    benchmark.UIUX_to_cardList = Date.now() - startTime;\n  }\n  console.log(`[getSrcProfile] ttaken: ${(benchmark.getSrcProfile)}ms`);\n\n  if (response.error) {\n    setPassFail('FAIL');\n    throw new Error(JSON.stringify(response, null, 2));\n  } else if (response['reason']) {\n    console.warn('Unable to get card list: %o', response);\n    setPassFail('FAIL');\n    throw new Error(JSON.stringify(response, null, 2));\n  } else {\n    utils_gel('get_src_profile_complete').checked = true;\n    utils_gel('get_src_profile_complete_timing').innerHTML = `${(benchmark.getSrcProfile)}ms`;\n  }\n\n  response.profiles.forEach(profile => srcProfiles.push(profile));\n\n  // set first card\n  try {\n    intentPayload.srcDigitalCardId = srcProfiles[0].maskedCards[0].srcDigitalCardId;\n  } catch (ex) {\n    console.warn('SRC Profile contained no cards');\n    // throw new Error('profile masked card missing srcDigitalCardId', JSON.stringify(srcProfiles, null, 2));\n  }\n  intentPayload.idToken = srcProfiles[0].idToken;\n  intentPayload.srcCorrelationId = response.srcCorrelationId;\n  intentPayload.profiles = srcProfiles;\n\n  return response;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/unbind.js\n\n\n\n\n\nconst unbind = async (adapter, token) => {\n  if (token) {\n    console.log('[UNBIND]');\n    const start = Date.now();\n    const response = await adapter.unbindAppInstance({});\n    const end = Date.now();\n\n    benchmark.unbind = end - start;\n\n    if (response.error) {\n      setPassFail('FAIL');\n      throw new Error(JSON.stringify(response, null, 2));\n    } else {\n      utils_gel('unbind_complete').checked = true;\n      utils_gel('unbind_complete_timing').innerHTML = `${benchmark.unbind}ms`;\n\n      console.log('Unbind result received from Visa SRC System');\n//      console.log('Response Data', JSON.stringify(response));\n    }\n    updateBenchmarks();\n    return response;\n  }\n\n  return;\n}\n\n// EXTERNAL MODULE: ./benchmark/js/jose/visa-encrypt.js\nvar visa_encrypt = __webpack_require__(1);\n;// CONCATENATED MODULE: ./benchmark/js/stubs/pan-encryption-keys.js\nconst keys = {\n  sandbox: {\n    // kid: \"1bdab3cc\",\n    kid: 'V6YPL0DFJ2V56HIH6Q3F133fbZWyAyIHjWVSecx6KMF6iTHGM', // APIkey/srcInitiatorId\n    publicKey: {\n      e: 65537,\n      n: \"00:b1:93:c8:ba:c0:df:ef:24:27:9e:10:64:53:d9:ae:d7:85:4e:3b:70:ab:ba:2d:db:ee:b0:1f:d8:a6:1e:a1:b5:11:99:70:35:ed:bd:49:5f:d8:e0:d0:27:7e:be:0a:66:bb:24:eb:c4:15:12:73:ee:1b:d3:e5:0f:81:2c:06:16:a3:d6:52:9c:74:f0:4c:6a:af:03:c3:3a:f1:68:8c:1a:2e:db:09:72:ab:c6:dc:cb:45:2c:f8:17:de:0b:34:84:e6:53:15:75:25:d3:5d:75:dc:36:ab:be:a9:bd:b6:8c:20:82:24:02:e9:c6:c0:2b:b1:ba:0c:39:7b:0b:79:d8:77:33:85:cd:43:95:c6:02:d4:5f:ed:bf:be:b9:36:39:0e:bf:4a:2d:8c:94:bd:92:80:9d:8d:38:30:a2:4f:10:ee:78:62:22:05:33:90:d3:02:13:4e:9a:cd:3c:f6:37:4c:77:1f:94:44:82:89:8c:f5:36:f9:1a:47:1b:5b:bc:2c:21:b4:db:c4:53:22:93:ec:35:b4:5a:9e:e4:b9:4c:06:3f:ce:5c:43:81:bd:61:28:9d:fa:61:b6:44:34:72:e0:f4:f5:d3:06:17:4e:32:55:3d:d0:34:cb:95:f7:1b:2d:36:be:0f:b0:e0:96:30:1a:58:2b:af:cc:b3:da:1b\"\n    }\n  },\n  qa_perf: {\n    // kid: 'a74e23ee',\n    // kid: 'UBHBN6UGSOK1XYQTZPNU11yrza5YNoasOQ2Aolmal9BqU3GK4',\n    // kid: '7HKFOSV9G52FPO4VGB9211lO1Y3E5OP_TufMQmyCjWJKy1N64',\n    // kid: 'FFK8WJ6YIKY70NCAQTKZ11uW71NHdKODq9DlKX5SYpSM63xAY',\n    kid: 'L6MLA3P263NC8AFUJGW411x9qo7NVCUjL92sElZ3vdIlsSny0',\n    publicKey: {\n      e: 65537,\n      // n: 'cf:c4:da:e6:c5:f2:57:44:e3:32:91:e3:18:a1:87:fd:3b:be:f2:aa:67:d4:13:7c:cd:56:ba:11:fb:8f:67:78:24:cf:c0:65:54:32:8a:ad:d6:11:9e:3a:f3:39:1d:fd:c1:9c:34:45:62:e8:cb:24:62:df:8a:5e:ff:b2:f6:8a:3a:5c:66:3f:bd:5e:a9:1d:73:56:8f:bf:d7:10:ce:9b:0f:3f:7a:cf:4d:18:b0:0f:9b:cd:29:c6:6a:06:fc:37:0a:f7:bd:49:7d:f1:b7:8e:7f:aa:9d:17:69:1f:ff:b5:cd:a6:26:48:40:03:ba:54:7a:54:44:02:55:a4:f5:ad:25:95:02:76:45:e0:82:35:70:0e:49:71:f3:71:71:c9:14:79:7d:ae:1a:ef:99:c9:d1:86:9b:20:11:0e:6a:eb:7a:64:ca:fc:a2:69:ae:fa:bd:e6:b0:dd:96:03:f2:e1:c5:a0:c4:bf:a9:7c:41:c5:c6:9b:10:8f:e8:86:08:7f:3f:1d:69:ee:78:3f:fc:52:ac:5c:a2:51:76:4b:38:6e:39:80:7f:b9:24:67:63:9e:e9:e6:89:96:39:08:ff:2b:11:15:0e:f7:e1:e8:c7:ed:a0:a3:2b:02:71:6b:05:d8:fc:85:5a:e8:c3:4a:3e:0b:83:04:4a:65:ee:23:4e:a7'\n      // n: '00c6ec2af74e96d0890d3a50cfbb8050544f86059c525df7c583103a7e1339d8dbac81dd0650f83fa3e68b1f1c677e10db87f71222dac33817709edb0d1c4acdfbb2cb1d9d67484e91f6688ae9c3f78c4f58a8062ca533f88ac39dc883222ace89776e1cbb8ed139b96d0c3e7a3a4e530bbb0220e72d092410eaf0951e0094fc822898182f5ae983bf44cb136fc3b3bb9b95fdc48f66812b135c5e9d1605ef99634ac12b9908c2c5dc2eba5c2a73e77f0032b595aa36c536ae74a13a6171eb0ccf76314aed66dda6b1c9f692b8b92bee250e9114c93d169b9cac1ad10ca2d1b79371d3ddf4a698a2b40217e43cc4285cbfe9de8d1e9c20b14cb6a37129f92f7e4d',\n      n: '00:c6:ec:2a:f7:4e:96:d0:89:0d:3a:50:cf:bb:80:50:54:4f:86:05:9c:52:5d:f7:c5:83:10:3a:7e:13:39:d8:db:ac:81:dd:06:50:f8:3f:a3:e6:8b:1f:1c:67:7e:10:db:87:f7:12:22:da:c3:38:17:70:9e:db:0d:1c:4a:cd:fb:b2:cb:1d:9d:67:48:4e:91:f6:68:8a:e9:c3:f7:8c:4f:58:a8:06:2c:a5:33:f8:8a:c3:9d:c8:83:22:2a:ce:89:77:6e:1c:bb:8e:d1:39:b9:6d:0c:3e:7a:3a:4e:53:0b:bb:02:20:e7:2d:09:24:10:ea:f0:95:1e:00:94:fc:82:28:98:18:2f:5a:e9:83:bf:44:cb:13:6f:c3:b3:bb:9b:95:fd:c4:8f:66:81:2b:13:5c:5e:9d:16:05:ef:99:63:4a:c1:2b:99:08:c2:c5:dc:2e:ba:5c:2a:73:e7:7f:00:32:b5:95:aa:36:c5:36:ae:74:a1:3a:61:71:eb:0c:cf:76:31:4a:ed:66:dd:a6:b1:c9:f6:92:b8:b9:2b:ee:25:0e:91:14:c9:3d:16:9b:9c:ac:1a:d1:0c:a2:d1:b7:93:71:d3:dd:f4:a6:98:a2:b4:02:17:e4:3c:c4:28:5c:bf:e9:de:8d:1e:9c:20:b1:4c:b6:a3:71:29:f9:2f:7e:4d'\n    }\n  },\n  qa_perf_OLD: {\n    // kid: 'a74e23ee',\n    kid: 'UBHBN6UGSOK1XYQTZPNU11yrza5YNoasOQ2Aolmal9BqU3GK4',\n    publicKey: {\n      e: 0x010001,\n      n: 'cfc4dae6c5f25744e33291e318a187fd3bbef2aa67d4137ccd56ba11fb8f677824cfc06554328aadd6119e3af3391dfdc19c344562e8cb2462df8a5effb2f68a3a5c663fbd5ea91d73568fbfd710ce9b0f3f7acf4d18b00f9bcd29c66a06fc370af7bd497df1b78e7faa9d17691fffb5cda626484003ba547a54440255a4f5ad2595027645e08235700e4971f37171c914797dae1aef99c9d1869b20110e6aeb7a64cafca269aefabde6b0dd9603f2e1c5a0c4bfa97c41c5c69b108fe886087f3f1d69ee783ffc52ac5ca251764b386e39807fb92467639ee9e689963908ff2b11150ef7e1e8c7eda0a32b02716b05d8fc855ae8c34a3e0b83044a65ee234ea7'\n      //n: 'cf:c4:da:e6:c5:f2:57:44:e3:32:91:e3:18:a1:87:fd:3b:be:f2:aa:67:d4:13:7c:cd:56:ba:11:fb:8f:67:78:24:cf:c0:65:54:32:8a:ad:d6:11:9e:3a:f3:39:1d:fd:c1:9c:34:45:62:e8:cb:24:62:df:8a:5e:ff:b2:f6:8a:3a:5c:66:3f:bd:5e:a9:1d:73:56:8f:bf:d7:10:ce:9b:0f:3f:7a:cf:4d:18:b0:0f:9b:cd:29:c6:6a:06:fc:37:0a:f7:bd:49:7d:f1:b7:8e:7f:aa:9d:17:69:1f:ff:b5:cd:a6:26:48:40:03:ba:54:7a:54:44:02:55:a4:f5:ad:25:95:02:76:45:e0:82:35:70:0e:49:71:f3:71:71:c9:14:79:7d:ae:1a:ef:99:c9:d1:86:9b:20:11:0e:6a:eb:7a:64:ca:fc:a2:69:ae:fa:bd:e6:b0:dd:96:03:f2:e1:c5:a0:c4:bf:a9:7c:41:c5:c6:9b:10:8f:e8:86:08:7f:3f:1d:69:ee:78:3f:fc:52:ac:5c:a2:51:76:4b:38:6e:39:80:7f:b9:24:67:63:9e:e9:e6:89:96:39:08:ff:2b:11:15:0e:f7:e1:e8:c7:ed:a0:a3:2b:02:71:6b:05:d8:fc:85:5a:e8:c3:4a:3e:0b:83:04:4a:65:ee:23:4e:a7'\n    }\n  },\n  production: {\n    kid: \"JHA10LAKEFG0T7CIBS1O14Chn6lq3cdOxq-Wwqa62ZUwKvnm4\",\n    publicKey: {\n      e: 65537,\n      n: \"00:90:fb:a3:c1:52:63:7a:f2:3f:a1:e6:70:66:80:36:5a:3b:7d:e0:31:5c:32:f4:42:69:bf:22:46:21:06:ac:67:ca:5a:d3:42:c1:06:24:ca:5c:ae:46:80:7a:d7:97:18:9b:60:55:6e:fa:0a:1f:c6:32:bf:46:82:dd:dc:1a:87:a5:26:39:d2:6c:ce:62:f4:a5:5f:dc:6f:1f:ed:5f:35:a0:62:0d:ec:60:db:29:d2:c0:71:50:57:10:d4:0e:83:55:bc:8e:c7:12:5b:9a:7c:25:1c:61:39:7e:4b:b3:26:bf:aa:aa:e9:77:46:cc:2c:08:6f:af:3e:b8:7f:fb:ed:bf:45:28:a9:6b:d9:55:af:d8:2f:7c:8e:00:6c:50:01:2d:3a:8a:7a:da:34:ad:63:db:20:12:9d:85:c1:90:ec:93:0f:c7:3a:bc:db:7f:4a:3d:46:5f:4b:23:6e:78:07:1d:2f:ec:87:00:38:b7:2f:65:52:cd:d1:7b:b5:2e:ec:8b:7b:9e:fc:81:68:5c:3a:5b:82:0b:05:c6:f1:2d:ef:d5:25:04:33:81:b1:a8:1c:fe:6b:3d:fd:9b:18:94:96:8a:09:3f:19:8f:08:5a:90:ca:3f:f9:97:5c:f7:b9:ae:75:58:f5:8f:3d:bf:2f:99:78:97:fc:e2:6c:5e:6b:8b\"\n    }\n  },\n  development: {\n    kid: \"IPW4W1DX5D4N5E8LMAC6115la44Nu9zYob_bgrg5EUMksbgT4\",\n    publicKey: {\n      e: 65537,\n      n: \"00:ba:7e:ed:8a:98:e9:99:fb:bb:0d:d8:bf:b3:89:4c:13:74:93:67:0c:02:c9:e8:32:8d:42:2c:5a:fd:ac:cb:67:0e:c9:4b:2e:73:65:7a:1a:d2:45:6c:b8:28:d7:06:ac:1d:8b:0d:1b:88:96:22:35:c1:6f:5f:95:c7:09:0a:d5:fd:92:be:65:fc:36:14:ed:4a:60:5f:f3:bc:b9:20:a5:7e:cb:9c:35:c4:ef:09:26:78:3c:19:3e:d2:a2:9b:dd:b4:15:63:b2:a6:49:21:94:15:e4:37:d4:1e:e0:d9:f1:79:e7:01:a7:56:83:3b:37:59:be:9e:57:e8:9c:a8:84:2b:49:dd:5d:3d:04:37:fd:09:5f:59:93:20:f6:01:d2:d2:1a:57:1d:aa:6f:58:5c:ec:e2:df:77:ae:02:bf:9e:f3:bb:4e:e9:90:60:99:64:08:a4:84:71:c0:19:f0:ee:64:39:89:6d:bc:34:bf:03:f0:2e:69:8a:78:6d:20:9a:15:8f:64:b6:ee:5d:1a:4d:5b:2c:c9:87:a1:41:ee:92:f3:b4:56:24:35:73:53:e1:8c:4b:91:d6:f1:9f:31:6d:c8:a5:50:12:bf:d8:c1:a3:61:7f:4f:a5:6a:5b:98:91:94:68:bf:8f:49:5f:d5:e3:62:a1:a5:cc:98:7d:91:bb\"\n    }\n  },\n  cert: {\n    kid: \"3WQRGUSY6CESJS2KQSW811JXx9P1JLs2DrbOKqU9EXbfjreUo\",\n    publicKey: {\n      e: 65537,\n      n: \"1u29h6v2bcwNqCDatnQm6T4S_vKfXO-Hsp26abg9N9D-ENKKt3cQRQH8Pq6SeI74Y6VtWSYGo2bpK1p9dWXKHep-a9L6ugxO3UhilFFE_ZosL0KKOdALn4V-GWvIUPc7FittBn__IWS99eP1NJdtu89WH4MbCuSGbKjmmoak35GxC5cJTe858nVyTM7OqyHH52rDxpD3csl7GSgA56RHdoZMABkf3hH2men3DOji8l36gZaCPqlHKc6MP4b5RxP-uGaVNaxSd16PsZ15is8__EgQAK_PXP4mWUFGbEYFu-5NUhjmwngsywjc0HT9UncczvgePtKOh0ves49oFqQDMw\"\n    }\n  },\n  sandbox: {\n    // kid: \"1bdab3cc\",\n    kid: 'V6YPL0DFJ2V56HIH6Q3F133fbZWyAyIHjWVSecx6KMF6iTHGM',\n    publicKey: {\n      e: 65537,\n      n: \"00:b1:93:c8:ba:c0:df:ef:24:27:9e:10:64:53:d9:ae:d7:85:4e:3b:70:ab:ba:2d:db:ee:b0:1f:d8:a6:1e:a1:b5:11:99:70:35:ed:bd:49:5f:d8:e0:d0:27:7e:be:0a:66:bb:24:eb:c4:15:12:73:ee:1b:d3:e5:0f:81:2c:06:16:a3:d6:52:9c:74:f0:4c:6a:af:03:c3:3a:f1:68:8c:1a:2e:db:09:72:ab:c6:dc:cb:45:2c:f8:17:de:0b:34:84:e6:53:15:75:25:d3:5d:75:dc:36:ab:be:a9:bd:b6:8c:20:82:24:02:e9:c6:c0:2b:b1:ba:0c:39:7b:0b:79:d8:77:33:85:cd:43:95:c6:02:d4:5f:ed:bf:be:b9:36:39:0e:bf:4a:2d:8c:94:bd:92:80:9d:8d:38:30:a2:4f:10:ee:78:62:22:05:33:90:d3:02:13:4e:9a:cd:3c:f6:37:4c:77:1f:94:44:82:89:8c:f5:36:f9:1a:47:1b:5b:bc:2c:21:b4:db:c4:53:22:93:ec:35:b4:5a:9e:e4:b9:4c:06:3f:ce:5c:43:81:bd:61:28:9d:fa:61:b6:44:34:72:e0:f4:f5:d3:06:17:4e:32:55:3d:d0:34:cb:95:f7:1b:2d:36:be:0f:b0:e0:96:30:1a:58:2b:af:cc:b3:da:1b\"\n    }\n  },\n  amex: {\n    kid: \"src-amex-card-enc-01\",\n    publicKey: {\n      e: 65537,\n      n: \"98:16:bc:c4:d7:1c:0a:25:a5:33:07:d9:05:89:ca:79:4c:b8:e0:9b:b0:fd:a7:4e:5b:76:d3:0b:46:3b:17:3a:04:ab:a7:ee:08:f0:a2:c5:7f:cd:18:39:98:93:ec:f8:f9:25:6a:96:3d:bf:20:b5:66:4b:72:3c:60:ef:cd:45:75:64:c8:fc:0f:17:48:d9:b6:9e:8f:4d:de:97:82:d4:4f:d5:cc:eb:97:fb:f2:3f:4b:ab:40:63:17:cc:09:33:c6:9d:05:3e:28:c3:b5:d6:c5:0f:72:0d:3d:c7:fe:e5:ed:7b:26:57:f6:44:5e:98:ce:a8:31:85:1b:56:ca:bc:33:66:58:66:0e:11:50:6d:6f:55:ac:f2:ee:5e:d0:1b:61:99:94:9c:14:27:08:6a:ac:c6:5b:5f:95:4f:ab:cc:8c:31:f5:b5:70:8b:b9:6c:b5:22:cc:6c:bf:22:00:3b:d1:1b:59:6b:50:b2:f9:1f:4c:94:93:75:f2:d4:39:70:7e:18:9d:04:0c:e3:9a:69:3f:89:d3:43:d1:64:b6:a6:59:7f:bf:1f:5b:f9:21:9a:be:53:85:75:ad:60:5c:fb:09:f6:f9:b7:a7:fd:e9:35:a7:5d:fe:04:77:12:55:5f:0e:f5:90:ca:01:59:fd:18:ec:0b:35:05:58:d6:a9:06:b6:af:18:90:60:06:7e:f2:b5:92:43:77:ec:9e:54:84:6d:47:50:04:18:18:f9:b0:1e:7a:d5:c5:37:ee:f1:f1:b3:a1:ef:f3:aa:db:d1:d1:d8:0d:26:a6:1f:7b:1a:fe:a1:76:9d:d9:94:48:df:56:10:2b:7d:28:35:a1:f0:47:11:af:6b:f7:db:ae:7b:99:c1:80:d7:05:bc:22:d5:6c:3f:8c:41:bd:75:f4:2d:db:40:84:0e:5c:ae:fa:70:40:97:49:b5:d1:b1:f3:e1:81:81:4d:6e:1a:32:6d:4f:6b:e1:70:63:b2:32:40:b5:28:72:c4:00:99:33:e5:76:8d\"\n    }\n  },\n  masterCard: {\n    kid: \"149123-src-fpan-encryption\",\n    publicKey: {\n      e: 65537,\n      n: \"vt4nDSPStTlM1NNcycvIqUf4x14I4jiTqMTKPjGtay0yfa1vByNChmuppDwET5gGGlpL8ccj3YVsBi9_bWoe_appkPwhxd7wR9RywV3zmWuMIhMwlk0lnHAML65nsHVM3oEpEvCfAPs1NXltTyfjnkgFENI3tHqtwdtM8eP02pp0jvW69fybvyVhLzXwSOgJntjtjRV7hQr5led_jWb5zzXI48OVTT_F9iinDdtX5y3E-if5WtGZUFETb_tZFZYnMLaLlHwvb6Zkr84RSwwsMf2nAL_4zP2UahMwzamhBoOSaqyxGxEq67Hr1U8zAC5hl9D8NbgSwpWxsODUrHx9rw\"\n    }\n  },\n  discover: {\n    kid: \"NTdkMDA1YTVjM2UyOTkzMmFiZDdmMWE0Y2IyZGE4NTMyNmNjNTVmZDM1ZGRkMDE0NmFjN2FiYzgyYjc4OWQ1NAo\",\n    publicKey: {\n      e: 65537,\n      n: \"00:9b:52:d4:cf:a2:74:bf:c6:f2:58:aa:0b:9c:59:39:88:dd:02:3c:d0:23:5f:32:1a:8c:3b:af:2f:9e:d1:ad:63:0a:d1:7c:dd:fc:a5:69:4a:86:6c:a9:35:e2:d5:35:40:1a:6d:12:d8:5e:f2:a7:06:f1:83:14:13:b8:67:d5:12:02:e2:b7:c0:e1:83:c9:fd:72:d9:23:08:22:67:15:fc:e4:cc:59:0d:51:aa:08:21:53:37:99:9d:6d:13:8a:33:8a:66:87:82:b7:c5:71:5c:7d:51:4b:8e:0d:0a:35:9f:d1:f2:76:41:f0:1f:92:05:3c:68:5a:a0:28:52:66:f3:4f:e2:0d:58:93:45:b9:68:84:71:b8:67:84:92:49:e6:ed:49:d4:4e:9b:00:4b:b8:77:f0:60:e7:ca:9c:73:85:79:0c:f3:be:9d:47:65:8a:d6:75:15:c1:1a:b1:c0:03:bc:d2:d3:65:32:ea:46:97:3a:1f:67:46:36:d3:95:7b:f3:c5:da:02:5a:d9:aa:d7:04:03:1d:ab:e8:43:05:02:cf:ba:1a:35:f9:f1:15:59:6c:60:aa:a9:80:02:65:18:01:2e:5c:92:81:a2:b2:43:62:38:25:b7:72:d0:8f:4d:f4:5e:f9:16:ed:5b:7d:74:83:75:fa:1e:c3:28:f5:05\"\n    }\n  }\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/encrypt-card.js\n\n\n\n\n\n// external, scrubbed sites\nconst encryptionKeys = (keys) ? keys : getEncryptionKeys();\n\nconst getRsaKeyFromDomain = () => {\n  const domain = getRootDomain();\n  console.log(`-- detected ${domain} from visa sdk url`);\n\n  switch (true) {\n    case 'https://secure.checkout.visa.com':\n      console.log('using PRODUCTION enc encryptionKeys');\n      return encryptionKeys.production;\n    case domain.indexOf('qaperf') > -1:\n      console.log('using QAPERF enc encryptionKeys');\n      return encryptionKeys.qa_perf;\n    case domain.indexOf('cert.') > -1:\n      console.log('using CERT enc encryptionKeys');\n      return encryptionKeys.cert;\n    case domain.indexOf('sandbox.') > -1:\n      console.log('using SBX enc encryptionKeys');\n      return encryptionKeys.sandbox;\n    default:\n      console.log('could not detect encryption key to use: using DEV enc encryptionKeys')\n      return encryptionKeys.development;\n      // default:\n    //   console.log('could not detect encryption key to use: using cert enc encryptionKeys')\n    //   return encryptionKeys.cert;\n  }\n}\n\nconst PANJWE_visa = async (s) => {\n  const { publicKey, kid } = getRsaKeyFromDomain();\n  console.info(`[PANJWE] kid: ${kid}`);\n  console.info('[PANJWE] publicKey: ', publicKey);\n  const crypt = new visa_encrypt.PANJWE(kid, publicKey);\n  return crypt.encrypt(s);\n}\n\n/* harmony default export */ const encrypt_card = (async (cardDataObject) => await PANJWE_visa(JSON.stringify(cardDataObject)));\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/get-visa-card.js\n\n\n\n\n\nconst handleCardData = async cardData => {\n  const ret = { cardData: null, encryptedCard: null };\n  const d = cardData.pan || cardData.data?.pan || cardData.data;\n  const expDateArray = d.ExpirationDate.split('/');\n  const vcoCard = {\n    card : {\n      cardSecurityCode: d.Cvv2Value,\n      cardholderFullName: d.CardholderName || \"SRC SDK\",\n      panExpirationMonth: parseInt(expDateArray[0]),\n      panExpirationYear: parseInt('20' + expDateArray[1]),\n      primaryAccountNumber: d.PrimaryAccountNumber,\n      cardholderFirstName: \"TestTool\",\n      cardholderLastName: \"SampleData\",\n      paymentAccountReference: \"\",\n\n      billingAddress: {\n        addressId: \"\",\n        name: \"\",\n        line1: d.AddressStreet,\n        line2: d.AddressStreet2,\n        line3: d.AddressStreet3,\n        city: d.City,\n        state: d.State,\n        countryCode: d.Country,\n        zip: d.AddressPostalCode,\n        createTime: \"\",\n        lastUsedTime: \"\",\n      }\n    }\n  };\n\n  console.log('object to encrypt: ', vcoCard);\n  ret.encryptedCard = await encrypt_card(vcoCard);\n  console.log(ret);\n  return ret;\n}\n\n/* harmony default export */ const get_visa_card = (async () => {\n  const binRange = utils_gel('bin_range').value;\n  const cardData = await fetch(`/cards?bin=${binRange}`).then(handleJsonResponse);\n  return await handleCardData(cardData);\n});\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/get-visa-card-manual.js\n\n\n\nconst encryptManualCardEntry = async () => {\n  const s = utils_gel('pan_json').value;\n  let pan;\n\n  try {\n    pan = JSON.parse(s);\n    return await handleCardData(pan);\n  } catch (e) {\n    catchErr('manual PAN JSON parse failed.');\n    return { encryptedCard: null }\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/flows/after-auth.js\n\n\n\n\n\n\n\n\n\n\n\nasync function afterAuthNewUser(adapter, label) {\n  const intentPayload = getIntentPayload();\n  console.info(`[ADD_CARD] ${label || 'new user + enroll'}`);\n\n  if (canUseTestCardApi()) {\n    intentPayload.encryptedCard = (await get_visa_card()).encryptedCard;\n  } else {\n    intentPayload.encryptedCard = (await encryptManualCardEntry()).encryptedCard;\n  }\n  // console.log('intent payload after getVisaCard: ', intentPayload);\n\n  if (intentPayload.srcDigitalCardId) {\n    console.info('card already assigned, undefining intentPayload.srcDigitalCardId')\n    intentPayload.srcDigitalCardId = undefined;\n  }\n\n  console.info(`[CHECKOUT] ${label || 'new user + enroll'}`);\n  const checkoutSuccess = await checkout(adapter).catch(catchErr);\n\n  if (!checkoutSuccess || checkoutSuccess.error) {\n    console.error(`checkout error detected: `, checkoutSuccess);\n    setPassFail('FAIL');\n    throw new Error(JSON.stringify(checkoutSuccess));\n  } else {\n    updateBenchmarks();\n  }\n\n  if (checkoutSuccess && checkoutSuccess.unbindAppInstance) {\n    await unbind(adapter, checkoutSuccess).catch(catchErr);\n  }\n  setPassFail('PASS');\n}\n\n\nasync function afterAuthReturning(adapter, token) {\n  console.info('[CARD_LIST]');\n  // getSrcProfile\n  const srcProfiles = await getSrcProfile(adapter, token).catch(catchErr);\n  updateBenchmarks();\n\n  console.log(\"------\", srcProfiles);\n\n  if (srcProfiles.error) {\n    setPassFail('FAIL');\n    // throw new Error(srcProfiles.error);\n    console.warn(srcProfiles.error);\n  }\n\n  const preferAddCard = utils_gel('add_card_flow').checked;\n\n  // checkout\n  if (\n    false === preferAddCard &&\n    srcProfiles &&\n    !srcProfiles.error &&\n    srcProfiles.profiles[0].maskedCards.length > 0\n  ) {\n    console.info('[CHECKOUT] returning user');\n    const checkoutSuccess = await checkout(adapter).catch(catchErr);\n\n    if (!checkoutSuccess || checkoutSuccess.error) {\n      console.error(`checkout error detected: `, checkoutSuccess);\n      setPassFail('FAIL');\n      throw new Error(JSON.stringify(checkoutSuccess));\n    } else {\n      updateBenchmarks();\n    }\n\n    if (checkoutSuccess && checkoutSuccess.unbindAppInstance) {\n      await unbind(adapter, checkoutSuccess).catch(catchErr);\n    }\n    setPassFail('PASS');\n  } else {\n    afterAuthNewUser(adapter, 'returning user add card');\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/flows/returning.js\n\n\n\n\n\nconst returningFlow = async (accessToken) => {\n  await afterAuthReturning(window.c2p_adapter, accessToken);\n\n  utils_gel('critical_apis').innerHTML = `Critical API timings: ${(benchmark.init + benchmark.isRecognized + benchmark.getSrcProfile) / 1000}s`;\n  utils_gel('checkout_apis').innerHTML = `Checkout API timings: ${(benchmark.checkout + benchmark.unbind) / 1000}s`;\n  updateBenchmarks();\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/flows/load-sdk.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (undefined && undefined.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n\n\n\n\n\n\n\n\n\nvar loadSdkBenchmark = function (sdkUrl) {\n    setStartTime();\n    var loadStart = Date.now();\n    load_sdk(sdkUrl, function () { return __awaiter(void 0, void 0, void 0, function () {\n        var accessToken, consumerPresent, vcoAdapter, adapter;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    vcoAdapter = window.vAdapters.VisaSRCI;\n                    adapter = new vcoAdapter();\n                    window.c2p_adapter = adapter;\n                    // init\n                    return [4 /*yield*/, init(adapter, loadStart).catch(catchErr)];\n                case 1:\n                    // init\n                    _a.sent();\n                    updateBenchmarks();\n                    // eliminate init() load time from impacting recognize timings\n                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 5000); })];\n                case 2:\n                    // eliminate init() load time from impacting recognize timings\n                    _a.sent();\n                    console.log('after await 5s');\n                    return [4 /*yield*/, isRecognized(adapter).catch(catchErr)];\n                case 3:\n                    // isRecognized\n                    accessToken = _a.sent();\n                    updateBenchmarks();\n                    if (!!accessToken) return [3 /*break*/, 14];\n                    console.info(\"recognize 204 - no access token\");\n                    return [4 /*yield*/, authFlow(afterAuthReturning, updateBenchmarks).catch(catchErr)];\n                case 4:\n                    consumerPresent = _a.sent();\n                    updateBenchmarks();\n                    if (!consumerPresent) return [3 /*break*/, 12];\n                    if (!(consumerPresent === 'manual')) return [3 /*break*/, 5];\n                    console.log(' --- awaiting manual OTP entry');\n                    return [3 /*break*/, 11];\n                case 5:\n                    if (!(consumerPresent.consumerPresent === false)) return [3 /*break*/, 7];\n                    return [4 /*yield*/, afterAuthNewUser(adapter)];\n                case 6:\n                    _a.sent();\n                    return [3 /*break*/, 11];\n                case 7:\n                    if (!consumerPresent.idToken) return [3 /*break*/, 9];\n                    return [4 /*yield*/, afterAuthReturning(adapter, consumerPresent.idToken)];\n                case 8:\n                    _a.sent();\n                    return [3 /*break*/, 11];\n                case 9: return [4 /*yield*/, afterAuthReturning(adapter)];\n                case 10:\n                    _a.sent();\n                    _a.label = 11;\n                case 11: return [3 /*break*/, 13];\n                case 12:\n                    setPassFail('FAIL');\n                    throw new Error('authFlow failure detected');\n                case 13: return [3 /*break*/, 15];\n                case 14:\n                    console.log('[ReturningRecognized] got accessToken', accessToken);\n                    returningFlow(accessToken);\n                    _a.label = 15;\n                case 15: return [2 /*return*/];\n            }\n        });\n    }); });\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/flows/start-benchmark.js\n\n\n\n\n\n\n/**\n * Called in context of \"GO\" button\n * `this` is HTMLSelectElement id: \"sdk_picker_v3\"\n */\nconst startBenchmark = function() {\n  resetUi();\n  resetFlow();\n\n  if (validate()) {\n    const sdkUrl = this.value;\n    const key = this.options[this.selectedIndex].innerHTML.trim();\n\n    // update initData from env config\n    autoFillUUID(key);\n\n    if (sdkUrl) {\n      console.log(`Benchmark using [${sdkUrl}]`);\n      benchmarkState.sdkUrl = sdkUrl;\n      localStorage.setItem('sdk', sdkUrl);\n      loadSdkBenchmark(sdkUrl, key);\n    }\n  } else {\n    console.error('invalid start options');\n  }\n};\n\n/* harmony default export */ const start_benchmark = (startBenchmark);\n\n;// CONCATENATED MODULE: ./benchmark/js/components/sdk-selector/index.js\n\n\n\nconst bindSdkGo = () => {\n  const goButton = utils_gel('go_v3');\n  \n  if (goButton) {\n    goButton.onclick = () => {\n      start_benchmark.call(utils_gel('sdk_picker_v3'));\n    };\n  }\n}\n\nconst handleSdkSelection = e => {\n  if (e.target.classList.contains('sdk-picker')) {\n    localStorage.setItem('sdk', e.target.value);\n    utils_gel('config_url').value = e.target.value;\n  }\n};\n\nconst bindSdkSelection = () => {\n  document.addEventListener('change', handleSdkSelection);\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/components/toggle/index.js\n\n\n\nconst toggleHandler = async e => {\n  if (e.target.className.indexOf('toggle-header') > -1) {\n    e.target.parentNode.classList.toggle(\"open\");\n    e.stopPropagation();\n  }\n}\n\nif (!canUseTestCardApi()) {\n  utils_gel('pan_entry').style.display = 'block';\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/generate-email-address.js\n\n\n// export default () => `${uuidv4()}@mailinator.com`;\n/* harmony default export */ const generate_email_address = (() => `c2p_${Date.now()}@mailinator.com`);\n\n;// CONCATENATED MODULE: ./benchmark/js/ui/bind-compliance.js\n\n\n\nconst bindComplianceToggle = () => {\n  utils_gel('compliance_toggle').addEventListener('change', e => {\n    if (e.target.checked) {\n      injectComplianceSettings();\n      localStorage.setItem('setCompliance', 'on');\n    } else {\n      removeComplianceSettings();\n      localStorage.setItem('setCompliance', 'off');\n    }\n  });\n\n  if (localStorage.getItem('setCompliance') === 'on') {\n    utils_gel('compliance_toggle').checked = true;\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/ui/event-handlers.js\n\n\n\n\n\n\n\n\n\n\nlet automateTimeout;\nlet automateClickTimeout;\nlet timerInterval;\n\ndocument.body.addEventListener('click', e => {\n  try {\n    toggleHandler(e);\n  } catch (e) {\n    catchErr(e);\n  }\n});\n\n\nconst setPassFail = status => {\n  const e = new CustomEvent('passfail', { bubbles: true, detail: status });\n  utils_gel('pass_fail').dispatchEvent(e);\n}\nconst handlePassFail = e => {\n  utils_gel('pass_fail').innerHTML = e.detail;\n  utils_gel('pass_fail').classList.add((e.detail === 'PASS') ? 'pass' : 'fail');\n}\ndocument.body.addEventListener('passfail', handlePassFail);\n\n\nconst handleBubbledChangeEvents = async e => {\n  switch (e.target.id) {\n    case 'add_card_flow':\n    case 'returning_flow':\n      localStorage.setItem('flow_selector', e.target.value);\n      break;\n\n    case 'automate':\n      let timerValue = 30000;\n      if (e.target.checked === true) {\n        localStorage.setItem('automate', 'true');\n        automateClickTimeout = setTimeout(() => {\n          utils_gel('go_v3').click();\n        }, 1000);\n        automateTimeout = setTimeout(() => {\n          window.location.reload();\n        }, timerValue);\n        let displayTimer = timerValue / 1000;\n        timerInterval = setInterval(() => {\n          displayTimer -= 1;\n          utils_gel('timer').innerHTML = `${displayTimer}s until refresh`;\n        }, 1000);\n        document.body.className = 'disable-ui';\n      } else {\n        localStorage.setItem('automate', 'false');\n        clearTimeout(automateClickTimeout);\n        clearTimeout(automateTimeout);\n        clearInterval(timerInterval);\n        utils_gel('timer').innerHTML = ``;\n        document.body.className = '';\n      }\n      break;\n  }\n}\n\n\n\n\nconst handleConfigArea = () => {\n  utils_gel('config').innerHTML = JSON.stringify(data_initData, null, 2);\n};\n\nconst attachEventHandlers = () => {\n  const lsEmail = localStorage.getItem('email');\n  const automate = localStorage.getItem('automate');\n  const userType = localStorage.getItem('user_flow_selector');\n  const flowType = localStorage.getItem('flow_selector');\n  \n  bindComplianceToggle();\n  bindSdkGo();\n  bindSdkSelection();\n\n  initBinSelector();\n\n\n  // multiselect\n  document.addEventListener('click', e => {\n    if (e.target.tagName === 'OPTION' && e.target.className === 'historical_email_option') {\n      e.target.value && emailSetter(e.target.value);\n    }\n  });\n  \n  // dropdown\n  document.addEventListener('change', e => {\n    if (e.target.tagName === 'SELECT' && e.target.id === 'email_historical') {\n      e.target.value && emailSetter(e.target.value);\n    }\n  });\n\n  // new user\n  utils_gel('new_user').addEventListener('click', () => {\n    const newEmail = generate_email_address();\n    localStorage.setItem('email', newEmail);\n    utils_gel('emailInput').value = newEmail;\n  });\n\n  document.addEventListener('change', e => {\n    handleBubbledChangeEvents(e);\n  });\n\n  if (lsEmail) {\n    emailSetter(lsEmail);\n  }\n\n  if (automate === 'true') {\n    // console.log('automate is true');\n    const cb = utils_gel('automate');\n    cb && (cb.checked = true);\n    const evt = new Event('change', {\n      bubbles: true\n    });\n    cb.dispatchEvent(evt);\n  }\n\n  handleConfigArea();\n\n  if (userType) {\n    qs(`input[value=\"${userType}\"]`) && (qs(`input[value=\"${userType}\"]`).checked = true);\n  }\n  if (flowType) {\n    qs(`input[value=\"${flowType}\"]`) && (qs(`input[value=\"${flowType}\"]`).checked = true);\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/flows/start-sdk-automation.ts\n\n\n\n\n\n/**\n * Called in context of \"GO\" button\n * `this` is HTMLSelectElement id: \"sdk_picker_v3\"\n */\nvar startSdkAutomation = function () {\n    resetUi();\n    resetFlow();\n    if (validate()) {\n        var sdkUrl = localStorage.getItem('srciDomain');\n        if (sdkUrl) {\n            // update initData from start page (excluding panEncryptionId)\n            autoFillUUIDAutomation();\n            benchmarkState.sdkUrl = sdkUrl;\n            localStorage.setItem('sdk', sdkUrl);\n            loadSdkBenchmark(sdkUrl);\n        }\n        else {\n            throw new Error('no SDK URL defined');\n        }\n    }\n};\n/* harmony default export */ const start_sdk_automation = (startSdkAutomation);\n\n;// CONCATENATED MODULE: ./benchmark/js/ui/sdk-automation.ts\n\n\n/**\n * set by src-sdk-automation start page\n * - email (same as benchmark)\n * - initiatorId\n * - panEncryId\n * - srciDomain (URL to SDK)\n * - dpaid\n * - srciDpaid\n */\nvar setAutomationRequestedValues = function () {\n    var sdkUrl = localStorage.getItem('srciDomain');\n    if (sdkUrl) {\n        localStorage.setItem('sdk', sdkUrl);\n    }\n};\nvar bindGoButton = function () {\n    var button = utils_gel('go_v3_automation');\n    if (button) {\n        button.addEventListener('click', start_sdk_automation);\n    }\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/integrated.ts\n\n\n\n\n\n\nattachEventHandlers();\nsetHistoricalEmails();\nsetAutomationRequestedValues();\nbindGoButton();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///690\n")}},__webpack_module_cache__={};function __webpack_require__(n){var c=__webpack_module_cache__[n];if(void 0!==c)return c.exports;var I=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](I,I.exports,__webpack_require__),I.exports}var __webpack_exports__=__webpack_require__(690)})();
