(()=>{var __webpack_modules__={1:(module,exports)=>{eval('/*-\n * Copyright 2014 Square Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar Jose = {};\n\n/**\n * Javascript Object Signing and Encryption library.\n *\n * @author Alok Menghrajani <alok@squareup.com>\n */\n\n/**\n * Initializes a JoseJWE object.\n */\nvar JoseJWE = {};\n\n/**\n * Initializes a JoseJWS object.\n */\nvar JoseJWS = {};\n\n/**\n * Set crypto provider to use (window.crypto, node-webcrypto-ossl, node-webcrypto-pkcs11 etc.).\n */\nexports.setCrypto = function (cp) {\n  Jose.crypto = cp;\n};\n\n/**\n * Default to the global "crypto" variable\n */\nif (typeof(crypto) !== \'undefined\') {\n  exports.setCrypto(crypto);\n}\n\n/**\n * Use Node versions of atob, btoa functions outside the browser\n */\nif (typeof atob !== "function") {\n  atob = function (str) {\n    return new Buffer(str, \'base64\').toString(\'binary\');\n  };\n}\n\nif (typeof btoa !== "function") {\n  btoa = function (str) {\n    var buffer;\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = new Buffer(str.toString(), \'binary\');\n    }\n    return buffer.toString(\'base64\');\n  };\n}\n\n/**\n * Checks if we have all the required APIs.\n *\n * It might make sense to take a Cryptographer and delegate some of the checks\n * to the cryptographer. I however wanted to keep things simple, so I put all\n * the checks here for now.\n *\n * This list is generated manually and needs to be kept up-to-date.\n *\n * Casual testing shows that:\n * - things work in Chrome 40.0.2214.115\n * - things work in Firefox 35.0.1\n * - Safari 7.1.3 doesn\'t support JWK keys.\n * - Internet Explorer doesn\'t support Promises.\n *\n * Note: We don\'t check if the browser supports specific crypto operations.\n *       I.e. it\'s possible for this function to return true, but encryption or\n *       decryption to subsequently fail because the browser does not support a\n *       given encryption, decryption, key wrapping, key unwrapping or hmac\n *       operation.\n *\n * @return bool\n */\nJose.caniuse = function() {\n  var r = true;\n\n  // Promises/A+ (https://promisesaplus.com/)\n  r = r && (typeof Promise == "function");\n  r = r && (typeof Promise.reject == "function");\n  r = r && (typeof Promise.prototype.then == "function");\n  r = r && (typeof Promise.all == "function");\n\n  // Crypto (http://www.w3.org/TR/WebCryptoAPI/)\n  r = r && (typeof Jose.crypto == "object");\n  r = r && (typeof Jose.crypto.subtle == "object");\n  r = r && (typeof Jose.crypto.getRandomValues == "function");\n  r = r && (typeof Jose.crypto.subtle.importKey == "function");\n  r = r && (typeof Jose.crypto.subtle.generateKey == "function");\n  r = r && (typeof Jose.crypto.subtle.exportKey == "function");\n  r = r && (typeof Jose.crypto.subtle.wrapKey == "function");\n  r = r && (typeof Jose.crypto.subtle.unwrapKey == "function");\n  r = r && (typeof Jose.crypto.subtle.encrypt == "function");\n  r = r && (typeof Jose.crypto.subtle.decrypt == "function");\n  r = r && (typeof Jose.crypto.subtle.sign == "function");\n\n  // ArrayBuffer (http://people.mozilla.org/~jorendorff/es6-draft.html#sec-arraybuffer-constructor)\n  r = r && (typeof ArrayBuffer == "function");\n  r = r && (typeof Uint8Array == "function" || typeof Uint8Array == "object"); // Safari uses "object"\n  r = r && (typeof Uint32Array == "function" || typeof Uint32Array == "object"); // Safari uses "object"\n  // skipping Uint32Array.prototype.buffer because https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-%typedarrayprototype%-object\n\n  // JSON (http://www.ecma-international.org/ecma-262/5.1/#sec-15.12.3)\n  r = r && (typeof JSON == "object");\n  r = r && (typeof JSON.parse == "function");\n  r = r && (typeof JSON.stringify == "function");\n\n  // Base64 (http://www.w3.org/TR/html5/webappapis.html#dom-windowbase64-atob)\n  r = r && (typeof atob == "function");\n  r = r && (typeof btoa == "function");\n\n  // skipping Array functions (map, join, push, length, etc.)\n  // skipping String functions (split, charCodeAt, fromCharCode, replace, etc.)\n  // skipping regexp.test and parseInt\n\n  return r;\n};\n\n/**\n * Feel free to override this function.\n */\nJose.assert = function(expr, msg) {\n  if (!expr) {\n    throw new Error(msg);\n  }\n};\n\nexports.Jose = Jose;\nexports.JoseJWE = JoseJWE;\nexports.JoseJWS = JoseJWS;\n/*-\n * Copyright 2014 Square Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The WebCryptographer uses http://www.w3.org/TR/WebCryptoAPI/ to perform\n * various crypto operations. In theory, this should help build the library with\n * different underlying crypto APIs. I\'m however unclear if we\'ll run into code\n * duplication or callback vs Promise based API issues.\n */\nvar WebCryptographer = function() {\n  this.setKeyEncryptionAlgorithm("RSA-OAEP");\n  this.setContentEncryptionAlgorithm("A256GCM");\n  this.setContentSignAlgorithm("RS256");\n};\n\nJose.WebCryptographer = WebCryptographer;\n\n/**\n * Overrides the default key encryption algorithm\n * @param alg  string\n */\nWebCryptographer.prototype.setKeyEncryptionAlgorithm = function(alg) {\n  this.key_encryption = getCryptoConfig(alg);\n};\n\nWebCryptographer.prototype.getKeyEncryptionAlgorithm = function() {\n  return this.key_encryption.jwe_name;\n};\n\n/**\n * Overrides the default content encryption algorithm\n * @param alg  string\n */\nWebCryptographer.prototype.setContentEncryptionAlgorithm = function(alg) {\n  this.content_encryption = getCryptoConfig(alg);\n};\n\nWebCryptographer.prototype.getContentEncryptionAlgorithm = function() {\n  return this.content_encryption.jwe_name;\n};\n\n/**\n * Overrides the default content sign algorithm\n * @param alg  string\n */\nWebCryptographer.prototype.setContentSignAlgorithm = function(alg) {\n  this.content_sign = getSignConfig(alg);\n};\n\nWebCryptographer.prototype.getContentSignAlgorithm = function() {\n  return this.content_sign.jwa_name;\n};\n\n/**\n * Generates an IV.\n * This function mainly exists so that it can be mocked for testing purpose.\n *\n * @return Uint8Array with random bytes\n */\nWebCryptographer.prototype.createIV = function() {\n  var iv = new Uint8Array(new Array(this.content_encryption.iv_bytes));\n  return Jose.crypto.getRandomValues(iv);\n};\n\n/**\n * Creates a random content encryption key.\n * This function mainly exists so that it can be mocked for testing purpose.\n *\n * @return Promise<CryptoKey>\n */\nWebCryptographer.prototype.createCek = function() {\n  var hack = getCekWorkaround(this.content_encryption);\n  return Jose.crypto.subtle.generateKey(hack.id, true, hack.enc_op);\n};\n\nWebCryptographer.prototype.wrapCek = function(cek, key) {\n  return Jose.crypto.subtle.wrapKey("raw", cek, key, this.key_encryption.id);\n};\n\nWebCryptographer.prototype.unwrapCek = function(cek, key) {\n  var hack = getCekWorkaround(this.content_encryption);\n  var extractable = (this.content_encryption.specific_cek_bytes > 0);\n  var key_encryption = this.key_encryption.id;\n\n  return Jose.crypto.subtle.unwrapKey("raw", cek, key, key_encryption, hack.id, extractable, hack.dec_op);\n};\n\n/**\n * Returns algorithm and operation needed to create a CEK.\n *\n * In some cases, e.g. A128CBC-HS256, the CEK gets split into two keys. The Web\n * Crypto API does not allow us to generate an arbitrary number of bytes and\n * then create a CryptoKey without any associated algorithm. We therefore piggy\n * back on AES-CBS and HMAC which allows the creation of CEKs of size 16, 32, 64\n * and 128 bytes.\n */\nvar getCekWorkaround = function(alg) {\n  var len = alg.specific_cek_bytes;\n  if (len) {\n    if (len == 16) {\n      return {id: {name: "AES-CBC", length: 128}, enc_op: ["encrypt"], dec_op: ["decrypt"]};\n    } else if (len == 32) {\n      return {id: {name: "AES-CBC", length: 256}, enc_op: ["encrypt"], dec_op: ["decrypt"]};\n    } else if (len == 64) {\n      return {id: {name: "HMAC", hash: {name: "SHA-256"}}, enc_op: ["sign"], dec_op: ["verify"]};\n    } else if (len == 128) {\n      return {id: {name: "HMAC", hash: {name: "SHA-384"}}, enc_op: ["sign"], dec_op: ["verify"]};\n    } else {\n      Jose.assert(false, "getCekWorkaround: invalid len");\n    }\n  }\n  return {id: alg.id, enc_op: ["encrypt"], dec_op: ["decrypt"]};\n};\n\n/**\n * Encrypts plain_text with cek.\n *\n * @param iv          Uint8Array\n * @param aad         Uint8Array\n * @param cek_promise Promise<CryptoKey>\n * @param plain_text  Uint8Array\n * @return Promise<json>\n */\nWebCryptographer.prototype.encrypt = function(iv, aad, cek_promise, plain_text) {\n  var config = this.content_encryption;\n  if (iv.length != config.iv_bytes) {\n    return Promise.reject(Error("invalid IV length"));\n  }\n  if (config.auth.aead) {\n    var tag_bytes = config.auth.tag_bytes;\n\n    var enc = {\n      name: config.id.name,\n      iv: iv,\n      additionalData: aad,\n      tagLength: tag_bytes * 8\n    };\n\n    return cek_promise.then(function(cek) {\n      return Jose.crypto.subtle.encrypt(enc, cek, plain_text).then(function(cipher_text) {\n        var offset = cipher_text.byteLength - tag_bytes;\n        return {\n          cipher: cipher_text.slice(0, offset),\n          tag: cipher_text.slice(offset)\n        };\n      });\n    });\n  } else {\n    var keys = splitKey(config, cek_promise, ["encrypt"]);\n    var mac_key_promise = keys[0];\n    var enc_key_promise = keys[1];\n\n    // Encrypt the plain text\n    var cipher_text_promise = enc_key_promise.then(function(enc_key) {\n      var enc = {\n        name: config.id.name,\n        iv: iv\n      };\n      return Jose.crypto.subtle.encrypt(enc, enc_key, plain_text);\n    });\n\n    // compute MAC\n    var mac_promise = cipher_text_promise.then(function(cipher_text) {\n      return truncatedMac(\n        config,\n        mac_key_promise,\n        aad,\n        iv,\n        cipher_text);\n    });\n\n    return Promise.all([cipher_text_promise, mac_promise]).then(function(all) {\n      var cipher_text = all[0];\n      var mac = all[1];\n      return {\n        cipher: cipher_text,\n        tag: mac\n      };\n    });\n  }\n};\n\n/**\n * Decrypts cipher_text with cek. Validates the tag.\n *\n * @param cek_promise    Promise<CryptoKey>\n * @param aad protected header\n * @param iv IV\n * @param cipher_text text to be decrypted\n * @param tag to be verified\n * @return Promise<string>\n */\nWebCryptographer.prototype.decrypt = function(cek_promise, aad, iv, cipher_text, tag) {\n  /**\n   * Compares two Uint8Arrays in constant time.\n   *\n   * @return Promise<void>\n   */\n  var compare = function(config, mac_key_promise, arr1, arr2) {\n    Jose.assert(arr1 instanceof Uint8Array, "compare: invalid input");\n    Jose.assert(arr2 instanceof Uint8Array, "compare: invalid input");\n\n    return mac_key_promise.then(function(mac_key) {\n      var hash1 = Jose.crypto.subtle.sign(config.auth.id, mac_key, arr1);\n      var hash2 = Jose.crypto.subtle.sign(config.auth.id, mac_key, arr2);\n      return Promise.all([hash1, hash2]).then(function(all) {\n        var hash1 = new Uint8Array(all[0]);\n        var hash2 = new Uint8Array(all[1]);\n        if (hash1.length != hash2.length) {\n          throw new Error("compare failed");\n        }\n        for (var i = 0; i < hash1.length; i++) {\n          if (hash1[i] != hash2[i]) {\n            throw new Error("compare failed");\n          }\n        }\n        return Promise.resolve(null);\n      });\n    });\n  };\n\n  if (iv.length != this.content_encryption.iv_bytes) {\n    return Promise.reject(Error("decryptCiphertext: invalid IV"));\n  }\n\n  var config = this.content_encryption;\n  if (config.auth.aead) {\n    var dec = {\n      name: config.id.name,\n      iv: iv,\n      additionalData: aad,\n      tagLength: config.auth.tag_bytes * 8\n    };\n\n    return cek_promise.then(function(cek) {\n      var buf = Utils.arrayBufferConcat(cipher_text, tag);\n      return Jose.crypto.subtle.decrypt(dec, cek, buf);\n    });\n  } else {\n    var keys = splitKey(config, cek_promise, ["decrypt"]);\n    var mac_key_promise = keys[0];\n    var enc_key_promise = keys[1];\n\n    // Validate the MAC\n    var mac_promise = truncatedMac(\n      config,\n      mac_key_promise,\n      aad,\n      iv,\n      cipher_text);\n\n    return Promise.all([enc_key_promise, mac_promise]).then(function(all) {\n      var enc_key = all[0];\n      var mac = all[1];\n\n      return compare(config, mac_key_promise, new Uint8Array(mac), tag).then(function() {\n        var dec = {\n          name: config.id.name,\n          iv: iv\n        };\n        return Jose.crypto.subtle.decrypt(dec, enc_key, cipher_text);\n      }).catch(function(err) {\n        return Promise.reject(Error("decryptCiphertext: MAC failed."));\n      });\n    });\n  }\n};\n\n/**\n * Signs plain_text.\n *\n * @param aad         json\n * @param payload     String or json\n * @param key_promise Promise<CryptoKey>\n * @return Promise<ArrayBuffer>\n */\nWebCryptographer.prototype.sign = function(aad, payload, key_promise) {\n  var config = this.content_sign;\n\n  if (aad.alg) {\n    config = getSignConfig(aad.alg);\n  }\n\n  // Encrypt the plain text\n  return key_promise.then(function(key) {\n    return Jose.crypto.subtle.sign(config.id, key, Utils.arrayFromString(Utils.Base64Url.encode(JSON.stringify(aad)) + \'.\' + Utils.Base64Url.encodeArray(payload)));\n  });\n};\n\n/**\n * Verify JWS.\n *\n * @param payload     Base64Url encoded payload\n * @param aad         String Base64Url encoded JSON representation of the protected JWS header\n * @param signature   Uint8Array containing the signature\n * @param key_promise Promise<CryptoKey>\n * @param key_id      value of the kid JoseHeader, it\'ll be passed as part of the result to the returned promise\n * @return Promise<json>\n */\nWebCryptographer.prototype.verify = function(aad, payload, signature, key_promise, key_id) {\n  var config = this.content_sign;\n\n  return key_promise.then(function(key) {\n    config = getSignConfig(getJwaNameForSignKey(key));\n    return Jose.crypto.subtle.verify(config.id, key, signature, Utils.arrayFromString(aad + "." + payload)).then(function(res) {\n      return {kid: key_id, verified: res};\n    });\n  });\n};\n\nJose.WebCryptographer.keyId = function(rsa_key) {\n  return Utils.sha256(rsa_key.n + "+" + rsa_key.d);\n};\n\n/**\n * Splits a CEK into two pieces: a MAC key and an ENC key.\n *\n * This code is structured around the fact that the crypto API does not provide\n * a way to validate truncated MACs. The MAC key is therefore always imported to\n * sign data.\n *\n * @param config (used for key lengths & algorithms)\n * @param cek_promise Promise<CryptoKey>  CEK key to split\n * @param purpose Array<String> usages of the imported key\n * @return [Promise<mac key>, Promise<enc key>]\n */\nvar splitKey = function(config, cek_promise, purpose) {\n  // We need to split the CEK key into a MAC and ENC keys\n  var cek_bytes_promise = cek_promise.then(function(cek) {\n    return Jose.crypto.subtle.exportKey("raw", cek);\n  });\n  var mac_key_promise = cek_bytes_promise.then(function(cek_bytes) {\n    if (cek_bytes.byteLength * 8 != config.id.length + config.auth.key_bytes * 8) {\n      return Promise.reject(Error("encryptPlainText: incorrect cek length"));\n    }\n    var bytes = cek_bytes.slice(0, config.auth.key_bytes);\n    return Jose.crypto.subtle.importKey("raw", bytes, config.auth.id, false, ["sign"]);\n  });\n  var enc_key_promise = cek_bytes_promise.then(function(cek_bytes) {\n    if (cek_bytes.byteLength * 8 != config.id.length + config.auth.key_bytes * 8) {\n      return Promise.reject(Error("encryptPlainText: incorrect cek length"));\n    }\n    var bytes = cek_bytes.slice(config.auth.key_bytes);\n    return Jose.crypto.subtle.importKey("raw", bytes, config.id, false, purpose);\n  });\n  return [mac_key_promise, enc_key_promise];\n};\n\n/**\n * Converts the Jose web algorithms into data which is\n * useful for the Web Crypto API.\n *\n * length = in bits\n * bytes = in bytes\n */\nvar getCryptoConfig = function(alg) {\n  switch (alg) {\n    // Key encryption\n    case "RSA-OAEP":\n      return {\n        jwe_name: "RSA-OAEP",\n        id: {name: "RSA-OAEP", hash: {name: "SHA-1"}}\n      };\n    case "RSA-OAEP-256":\n      // return {\n      //   jwe_name: "RSA-OAEP-256",\n      //   id: {name: "RSA-OAEP-256", hash: {name: "SHA-256"}}\n      // };\n\n      // ORIGINAL SQUARE HEADER CONFIG\n      return {\n        jwe_name: "RSA-OAEP-256",\n        id: {name: "RSA-OAEP", hash: {name: "SHA-256"}}\n      };\n    case "A128KW":\n      return {\n        jwe_name: "A128KW",\n        id: {name: "AES-KW", length: 128}\n      };\n    case "A256KW":\n      return {\n        jwe_name: "A256KW",\n        id: {name: "AES-KW", length: 256}\n      };\n    case "dir":\n      return {\n        jwe_name: "dir"\n      };\n\n    // Content encryption\n    case "A128CBC-HS256":\n      return {\n        jwe_name: "A128CBC-HS256",\n        id: {name: "AES-CBC", length: 128},\n        iv_bytes: 16,\n        specific_cek_bytes: 32,\n        auth: {\n          key_bytes: 16,\n          id: {name: "HMAC", hash: {name: "SHA-256"}},\n          truncated_bytes: 16\n        }\n      };\n    case "A256CBC-HS512":\n      return {\n        jwe_name: "A256CBC-HS512",\n        id: {name: "AES-CBC", length: 256},\n        iv_bytes: 16,\n        specific_cek_bytes: 64,\n        auth: {\n          key_bytes: 32,\n          id: {name: "HMAC", hash: {name: "SHA-512"}},\n          truncated_bytes: 32\n        }\n      };\n    case "A128GCM":\n      return {\n        jwe_name: "A128GCM",\n        id: {name: "AES-GCM", length: 128},\n        iv_bytes: 12,\n        auth: {\n          aead: true,\n          tag_bytes: 16\n        }\n      };\n    case "A256GCM":\n      return {\n        jwe_name: "A256GCM",\n        id: {name: "AES-GCM", length: 256},\n        iv_bytes: 12,\n        auth: {\n          aead: true,\n          tag_bytes: 16\n        }\n      };\n    default:\n      throw Error("unsupported algorithm: " + alg);\n  }\n};\n\n/**\n * Computes a truncated MAC.\n *\n * @param config              configuration\n * @param mac_key_promise     Promise<CryptoKey>  mac key\n * @param aad                 Uint8Array\n * @param iv                  Uint8Array\n * @param cipher_text         Uint8Array\n * @return Promise<buffer>    truncated MAC\n */\nvar truncatedMac = function(config, mac_key_promise, aad, iv, cipher_text) {\n  return mac_key_promise.then(function(mac_key) {\n    var al = new Uint8Array(Utils.arrayFromInt32(aad.length * 8));\n    var al_full = new Uint8Array(8);\n    al_full.set(al, 4);\n    var buf = Utils.arrayBufferConcat(aad, iv, cipher_text, al_full);\n    return Jose.crypto.subtle.sign(config.auth.id, mac_key, buf).then(function(bytes) {\n      return bytes.slice(0, config.auth.truncated_bytes);\n    });\n  });\n};\n\n/**\n * Converts the Jose web algorithms into data which is\n * useful for the Web Crypto API.\n */\nvar getSignConfig = function(alg) {\n\n  switch (alg) {\n    case "RS256":\n      return {\n        jwa_name: "RS256",\n        id: {name: "RSASSA-PKCS1-v1_5", hash: {name: "SHA-256"}}\n      };\n    case "RS384":\n      return {\n        jwa_name: "RS384",\n        id: {name: "RSASSA-PKCS1-v1_5", hash: {name: "SHA-384"}}\n      };\n    case "RS512":\n      return {\n        jwa_name: "RS512",\n        id: {name: "RSASSA-PKCS1-v1_5", hash: {name: "SHA-512"}}\n      };\n    case "PS256":\n      return {\n        jwa_name: "PS256",\n        id: {name: "RSA-PSS", hash: {name: "SHA-256"}, saltLength: 20}\n      };\n    case "PS384":\n      return {\n        jwa_name: "PS384",\n        id: {name: "RSA-PSS", hash: {name: "SHA-384"}, saltLength: 20}\n      };\n    case "PS512":\n      return {\n        jwa_name: "PS512",\n        id: {name: "RSA-PSS", hash: {name: "SHA-512"}, saltLength: 20}\n      };\n    case "HS256":\n      return {\n        jwa_name: "HS256",\n        id: {name: "HMAC", hash: {name: "SHA-256"}}\n      };\n    case "HS384":\n      return {\n        jwa_name: "HS384",\n        id: {name: "HMAC", hash: {name: "SHA-384"}}\n      };\n    case "HS512":\n      return {\n        jwa_name: "HS512",\n        id: {name: "HMAC", hash: {name: "SHA-512"}}\n      };\n    case "ES256":\n      return {\n        jwa_name: "ES256",\n        id: {name: "ECDSA", hash: {name: "SHA-256"}}\n      };\n    case "ES384":\n      return {\n        jwa_name: "ES384",\n        id: {name: "ECDSA", hash: {name: "SHA-384"}}\n      };\n    case "ES512":\n      return {\n        jwa_name: "ES512",\n        id: {name: "ECDSA", hash: {name: "SHA-512"}}\n      };\n    default:\n      throw Error("unsupported algorithm: " + alg);\n  }\n};\n\n/**\n * Returns JWA name for a given CryptoKey\n * @param key CryptoKey\n */\nvar getJwaNameForSignKey = function(key) {\n\n  var rv = "",\n    sign_algo = key.algorithm.name,\n    hash_algo = key.algorithm.hash.name;\n\n  if(sign_algo == "RSASSA-PKCS1-v1_5") {\n    rv = "R";\n  } else if(sign_algo == "RSA-PSS") {\n    rv = "P";\n  } else {\n    throw new Error("unsupported sign/verify algorithm " + sign_algo);\n  }\n\n  if(hash_algo.indexOf("SHA-") === 0) {\n    rv += "S";\n  } else {\n    throw new Error("unsupported hash algorithm " + sign_algo);\n  }\n\n  rv += hash_algo.substring(4);\n\n  return rv;\n};\n\n/**\n * Derives key usage from algorithm\'s name\n *\n * @param alg String algorithm name\n * @returns {*}\n */\nvar getKeyUsageByAlg = function(alg) {\n\n  switch (alg) {\n    // signature\n    case "RS256":\n    case "RS384":\n    case "RS512":\n    case "PS256":\n    case "PS384":\n    case "PS512":\n    case "HS256":\n    case "HS384":\n    case "HS512":\n    case "ES256":\n    case "ES384":\n    case "ES512":\n      return {\n        publicKey: "verify",\n        privateKey: "sign"\n      };\n    // key encryption\n    case "RSA-OAEP":\n    case "RSA-OAEP-256":\n    case "A128KW":\n    case "A256KW":\n      return {\n        publicKey: "wrapKey",\n        privateKey: "unwrapKey"\n      };\n    default:\n      throw Error("unsupported algorithm: " + alg);\n  }\n};\n\n// Visa-specific\nmodule.exports = WebCryptographer;\n\n/*-\n * Copyright 2014 Square Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nJose.Utils = {};\nvar Utils = {};\n\n/**\n * Converts the output from `openssl x509 -text` or `openssl rsa -text` into a\n * CryptoKey which can then be used with RSA-OAEP. Also accepts (and validates)\n * JWK keys.\n *\n * TODO: this code probably belongs in the webcryptographer.\n *\n * @param rsa_key  public RSA key in json format. Parameters can be base64\n *                 encoded, strings or number (for \'e\').\n * @param alg      String, name of the algorithm\n * @return Promise<CryptoKey>\n */\nJose.Utils.importRsaPublicKey = function(rsa_key, alg) {\n  var jwk;\n  var config;\n  var usage = getKeyUsageByAlg(alg);\n\n  if (usage.publicKey == "wrapKey") {\n    if (!rsa_key.alg) {\n      rsa_key.alg = alg;\n    }\n    jwk = Utils.convertRsaKey(rsa_key, ["n", "e"]);\n    config = getCryptoConfig(alg);\n  } else {\n    var rk = {};\n    for (var name in rsa_key) {\n      if (rsa_key.hasOwnProperty(name)) {\n        rk[name] = rsa_key[name];\n      }\n    }\n\n    if (!rk.alg && alg) {\n      rk.alg = alg;\n    }\n    config = getSignConfig(rk.alg);\n    jwk = Utils.convertRsaKey(rk, ["n", "e"]);\n    jwk.ext = true;\n  }\n  return Jose.crypto.subtle.importKey("jwk", jwk, config.id, false, [usage.publicKey]);\n};\n\n/**\n * Converts the output from `openssl x509 -text` or `openssl rsa -text` into a\n * CryptoKey which can then be used with RSA-OAEP and RSA. Also accepts (and validates)\n * JWK keys.\n *\n * TODO: this code probably belongs in the webcryptographer.\n *\n * @param rsa_key  private RSA key in json format. Parameters can be base64\n *                 encoded, strings or number (for \'e\').\n * @param alg      String, name of the algorithm\n * @return Promise<CryptoKey>\n */\nJose.Utils.importRsaPrivateKey = function(rsa_key, alg) {\n  var jwk;\n  var config;\n  var usage = getKeyUsageByAlg(alg);\n\n  if (usage.privateKey == "unwrapKey") {\n    if (!rsa_key.alg) {\n      rsa_key.alg = alg;\n    }\n    jwk = Utils.convertRsaKey(rsa_key, ["n", "e", "d", "p", "q", "dp", "dq", "qi"]);\n    config = getCryptoConfig(alg);\n  } else {\n    var rk = {};\n    for (var name in rsa_key) {\n      if (rsa_key.hasOwnProperty(name)) {\n        rk[name] = rsa_key[name];\n      }\n    }\n    config = getSignConfig(alg);\n    if (!rk.alg && alg) {\n      rk.alg = alg;\n    }\n    jwk = Utils.convertRsaKey(rk, ["n", "e", "d", "p", "q", "dp", "dq", "qi"]);\n    jwk.ext = true;\n  }\n  return Jose.crypto.subtle.importKey("jwk", jwk, config.id, false, [usage.privateKey]);\n};\n\n// Private functions\n\nUtils.isString = function(str) {\n  return ((typeof(str) == "string") || (str instanceof String));\n};\n\n/**\n * Takes an arrayish (an array, ArrayBuffer or Uint8Array)\n * and returns an array or a Uint8Array.\n *\n * @param arr  arrayish\n * @return array or Uint8Array\n */\nUtils.arrayish = function(arr) {\n  if (arr instanceof Array) {\n    return arr;\n  }\n  if (arr instanceof Uint8Array) {\n    return arr;\n  }\n  if (arr instanceof ArrayBuffer) {\n    return new Uint8Array(arr);\n  }\n  Jose.assert(false, "arrayish: invalid input");\n};\n\n/**\n * Checks if an RSA key contains all the expected parameters. Also checks their\n * types. Converts hex encoded strings (or numbers) to base64.\n *\n * @param rsa_key     RSA key in json format. Parameters can be base64 encoded,\n *                    strings or number (for \'e\').\n * @param parameters  array<string>\n * @return json\n */\nUtils.convertRsaKey = function(rsa_key, parameters) {\n  var r = {};\n  var alg;\n\n  // Check that we have all the parameters\n  var missing = [];\n  parameters.map(function(p){if (typeof(rsa_key[p]) == "undefined") { missing.push(p); }});\n\n  if (missing.length > 0) {\n    Jose.assert(false, "convertRsaKey: Was expecting " + missing.join());\n  }\n\n  // kty is either missing or is set to "RSA"\n  if (typeof(rsa_key.kty) != "undefined") {\n    Jose.assert(rsa_key.kty == "RSA", "convertRsaKey: expecting rsa_key[\'kty\'] to be \'RSA\'");\n  }\n  r.kty = "RSA";\n\n  try {\n    getSignConfig(rsa_key.alg);\n    alg = rsa_key.alg;\n  } catch (err) {\n    try {\n      getCryptoConfig(rsa_key.alg);\n      alg = rsa_key.alg;\n    } catch (er) {\n      Jose.assert(alg, "convertRsaKey: expecting rsa_key[\'alg\'] to have a valid value");\n    }\n  }\n  r.alg = alg;\n\n  // note: we punt on checking key_ops\n\n  var intFromHex = function(e) {\n    return parseInt(e, 16);\n  };\n  for (var i = 0; i < parameters.length; i++) {\n    var p = parameters[i];\n    var v = rsa_key[p];\n    if (p == "e") {\n      if (typeof(v) == "number") {\n        v = Utils.Base64Url.encodeArray(Utils.stripLeadingZeros(Utils.arrayFromInt32(v)));\n      }\n    } else if (/^([0-9a-fA-F]{2}:)+[0-9a-fA-F]{2}$/.test(v)) {\n      var arr = v.split(":").map(intFromHex);\n      v = Utils.Base64Url.encodeArray(Utils.stripLeadingZeros(arr));\n    } else if (typeof(v) != "string") {\n      Jose.assert(false, "convertRsaKey: expecting rsa_key[\'" + p + "\'] to be a string");\n    }\n    r[p] = v;\n  }\n\n  return r;\n};\n\n/**\n * Converts a string into an array of ascii codes.\n *\n * @param str  ascii string\n * @return Uint8Array\n */\nUtils.arrayFromString = function(str) {\n  Jose.assert(Utils.isString(str), "arrayFromString: invalid input");\n  var arr = str.split(\'\').map(function(c) {\n    return c.charCodeAt(0);\n  });\n  return new Uint8Array(arr);\n};\n\n/**\n * Converts a string into an array of utf-8 codes.\n *\n* @param str  utf-8 string\n * @return Uint8Array\n */\nUtils.arrayFromUtf8String = function(str) {\n  Jose.assert(Utils.isString(str), "arrayFromUtf8String: invalid input");\n  // javascript represents strings as utf-16. Jose imposes the use of\n  // utf-8, so we need to convert from one representation to the other.\n  str = unescape(encodeURIComponent(str));\n  return Utils.arrayFromString(str);\n};\n\n/**\n * Converts an array of ascii bytes into a string.\n *\n * @param arr  arrayish\n * @return ascii string\n */\nUtils.stringFromArray = function(arr) {\n  arr = Utils.arrayish(arr);\n  var r = \'\';\n  for (var i = 0; i < arr.length; i++) {\n    r += String.fromCharCode(arr[i]);\n  }\n\n  return r;\n};\n\n/**\n * Converts an array of ascii bytes into a string.\n *\n * @param arr  ArrayBuffer\n * @return ascii string\n */\nUtils.utf8StringFromArray = function(arr) {\n  Jose.assert(arr instanceof ArrayBuffer, "utf8StringFromArray: invalid input");\n\n  // javascript represents strings as utf-16. Jose imposes the use of\n  // utf-8, so we need to convert from one representation to the other.\n  var r = Utils.stringFromArray(arr);\n  return decodeURIComponent(escape(r));\n};\n\n/**\n * Strips leading zero in an array.\n *\n * @param arr  arrayish\n * @return array\n */\nUtils.stripLeadingZeros = function(arr) {\n  if (arr instanceof ArrayBuffer) {\n    arr = new Uint8Array(arr);\n  }\n  var is_leading_zero = true;\n  var r = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (is_leading_zero && arr[i] === 0) {\n      continue;\n    }\n    is_leading_zero = false;\n    r.push(arr[i]);\n  }\n  return r;\n};\n\n/**\n * Converts a number into an array of 4 bytes (big endian).\n *\n * @param i  number\n * @return ArrayBuffer\n */\nUtils.arrayFromInt32 = function(i) {\n  Jose.assert(typeof(i) == "number", "arrayFromInt32: invalid input");\n  Jose.assert(i == i | 0, "arrayFromInt32: out of range");\n\n  var buf = new Uint8Array(new Uint32Array([i]).buffer);\n  var r = new Uint8Array(4);\n  for (var j = 0; j < 4; j++) {\n    r[j] = buf[3 - j];\n  }\n  return r.buffer;\n};\n\n/**\n * Concatenates arrayishes.\n *\n * @param arguments two or more arrayishes\n * @return Uint8Array\n */\nUtils.arrayBufferConcat = function(/* ... */) {\n  // Compute total size\n  var args = [];\n  var total = 0;\n  for (var i = 0; i < arguments.length; i++) {\n    args.push(Utils.arrayish(arguments[i]));\n    total += args[i].length;\n  }\n  var r = new Uint8Array(total);\n  var offset = 0;\n  for (i = 0; i < arguments.length; i++) {\n    for (var j = 0; j < args[i].length; j++) {\n      r[offset++] = args[i][j];\n    }\n  }\n  Jose.assert(offset == total, "arrayBufferConcat: unexpected offset");\n  return r;\n};\n\nUtils.Base64Url = {};\n\n/**\n * Base64Url encodes a string (no trailing \'=\')\n *\n * @param str  string\n * @return string\n */\nUtils.Base64Url.encode = function(str) {\n  Jose.assert(Utils.isString(str), "Base64Url.encode: invalid input");\n  return btoa(str)\n    .replace(/\\+/g, "-")\n    .replace(/\\//g, "_")\n    .replace(/=+$/, "");\n};\n\n/**\n * Base64Url encodes an array\n *\n * @param arr array or ArrayBuffer\n * @return string\n */\nUtils.Base64Url.encodeArray = function(arr) {\n  return Utils.Base64Url.encode(Utils.stringFromArray(arr));\n};\n\n/**\n * Base64Url decodes a string\n *\n * @param str  string\n * @return string\n */\nUtils.Base64Url.decode = function(str) {\n  Jose.assert(Utils.isString(str), "Base64Url.decode: invalid input");\n  // atob is nice and ignores missing \'=\'\n  return atob(str.replace(/-/g, "+").replace(/_/g, "/"));\n};\n\nUtils.Base64Url.decodeArray = function(str) {\n  Jose.assert(Utils.isString(str), "Base64Url.decodeArray: invalid input");\n  return Utils.arrayFromString(Utils.Base64Url.decode(str));\n};\n\nUtils.sha256 = function(str) {\n  // Browser docs indicate the first parameter to crypto.subtle.digest to be a\n  // DOMString. This was initially implemented as an object and continues to be\n  // supported, so we favor the older form for backwards compatibility.\n  return Jose.crypto.subtle.digest({name: "SHA-256"}, Utils.arrayFromString(str)).then(function(hash) {\n    return Utils.Base64Url.encodeArray(hash);\n  });\n};\n\nUtils.isCryptoKey = function(rsa_key) {\n  // Some browsers don\'t expose the CryptoKey as an object, so we need to check\n  // the constructor\'s name.\n  if (rsa_key.constructor.name == \'CryptoKey\') {\n    return true;\n  }\n\n  // In the presence of minifiers, relying on class names can be problematic,\n  // so let\'s also allow objects that have an \'algorithm\' property.\n  if (rsa_key.hasOwnProperty(\'algorithm\')) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = Utils;\n\n\n/*-\n * Copyright 2014 Square Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Handles encryption.\n *\n * @param cryptographer  an instance of WebCryptographer (or equivalent).\n * @param key_promise    Promise<CryptoKey>, either RSA or shared key\n */\nJoseJWE.Encrypter = function(cryptographer, key_promise) {\n  this.cryptographer = cryptographer;\n  this.key_promise = key_promise;\n  this.userHeaders = {};\n};\n\n/**\n * Adds a key/value pair which will be included in the header.\n *\n * The data lives in plaintext (an attacker can read the header) but is tamper\n * proof (an attacker cannot modify the header).\n *\n * Note: some headers have semantic implications. E.g. if you set the "zip"\n * header, you are responsible for properly compressing plain_text before\n * calling encrypt().\n *\n * @param k  String\n * @param v  String\n */\nJoseJWE.Encrypter.prototype.addHeader = function(k, v) {\n  this.userHeaders[k] = v;\n};\n\n/**\n *\n * Visa-custom\n * returns the header value\n * \n * @param k  String\n */\nJoseJWE.Encrypter.prototype.getHeader = function(k) {\n  return this.userHeaders[k];\n};\n\n/**\n * Performs encryption.\n *\n * @param plain_text  utf-8 string\n * @return Promise<String>\n */\nJoseJWE.Encrypter.prototype.encrypt = function(plain_text) {\n  /**\n   * Encrypts plain_text with CEK.\n   *\n   * @param cek_promise  Promise<CryptoKey>\n   * @param plain_text   string\n   * @return Promise<json>\n   */\n  var encryptPlainText = function(cek_promise, plain_text) {\n    // Create header\n    var headers = {};\n    for (var i in this.userHeaders) {\n      headers[i] = this.userHeaders[i];\n    }\n\n    headers.alg = this.cryptographer.getKeyEncryptionAlgorithm();\n    headers.enc = this.cryptographer.getContentEncryptionAlgorithm();\n    var jwe_protected_header = Utils.Base64Url.encode(JSON.stringify(headers));\n\n    // Create the IV\n    var iv = this.cryptographer.createIV();\n\n    // Create the AAD\n    var aad = Utils.arrayFromString(jwe_protected_header);\n    plain_text = Utils.arrayFromUtf8String(plain_text);\n\n    return this.cryptographer.encrypt(iv, aad, cek_promise, plain_text).then(function(r) {\n      r.header = jwe_protected_header;\n      r.iv = iv;\n      return r;\n    });\n  };\n\n  var cek_promise, encrypted_cek;\n\n  if (this.cryptographer.getKeyEncryptionAlgorithm() == "dir") {\n    // with direct encryption, this.key_promise provides the cek\n    // and encrypted_cek is empty\n    cek_promise = Promise.resolve(this.key_promise);\n    encrypted_cek = [];\n  } else {\n    // Create a CEK key\n    cek_promise = this.cryptographer.createCek();\n\n    // Key & Cek allows us to create the encrypted_cek\n    encrypted_cek = Promise.all([this.key_promise, cek_promise]).then(function (all) {\n      var key = all[0];\n      var cek = all[1];\n      return this.cryptographer.wrapCek(cek, key);\n    }.bind(this));\n  }\n\n  // Cek allows us to encrypy the plain text\n  var enc_promise = encryptPlainText.bind(this, cek_promise, plain_text)();\n\n  // Once we have all the promises, we can base64 encode all the pieces.\n  return Promise.all([encrypted_cek, enc_promise]).then(function(all) {\n    var encrypted_cek = all[0];\n    var data = all[1];\n    return data.header + "." +\n      Utils.Base64Url.encodeArray(encrypted_cek) + "." +\n      Utils.Base64Url.encodeArray(data.iv) + "." +\n      Utils.Base64Url.encodeArray(data.cipher) + "." +\n      Utils.Base64Url.encodeArray(data.tag);\n  });\n};\n\n/* eslint-disable */\n/**\n * Syntactic sugar for Visa VDCP use-case.\n * expects an RSA key as a JS data object with 2 required fields:\n * @param {!string} rsaKeyId (REQUIRED)\n * @param {!object} rsaKey (REQUIRED)\n *    Requires:\n *      - `n` attribute (modulus)\n *      - `e` attribute (publicExponent)\n * @param {?string} scheme (optional) default \'RSA-OAEP-256\'\n * @param {?API} cryptoProvider (optional) window.crypto, node-webcrypto-ossl, node-webcrypto-pkcs11 etc.\n */\nvar PANJWE = function(rsaKeyId, rsaKey, scheme, cryptoProvider) {\n  scheme = scheme || \'RSA-OAEP-256\';\n\n  if (cryptoProvider) {\n    Jose.setCrypto(cryptoProvider);\n  }\n\n  var cryptographer = new Jose.WebCryptographer();\n\n  // set values for scheme and content encryption algorithm. They will be added to header by JoseJWE.Encrypter.encrypt\n  cryptographer.setKeyEncryptionAlgorithm(scheme);\n  cryptographer.setContentEncryptionAlgorithm(\'A256GCM\');\n\n  var rsa_key = Jose.Utils.importRsaPublicKey(rsaKey, scheme);\n  var encrypter = new JoseJWE.Encrypter(cryptographer, rsa_key);\n  encrypter.addHeader(\'kid\', rsaKeyId);\n  encrypter.addHeader(\'typ\', \'JOSE\');\n  encrypter.addHeader(\'iat\', new Date().getTime());\n\n  this.encrypter = encrypter;\n\n  // for testing, testing bundle includes decrypter mixins\n  if (JoseJWE.Decrypter) {\n    var private_rsa_key = Jose.Utils.importRsaPrivateKey(rsaKey, scheme);\n    var decrypter = new JoseJWE.Decrypter(cryptographer, private_rsa_key);\n    this.decrypter = decrypter;\n\n    /**\n     * encrypts text\n     * @param {!string} encryptedText string to decrypt\n     * @returns {Promise}\n     */\n    this.decrypt = function(encryptedText) {\n      return this.decrypter.decrypt(encryptedText);\n    };\n  }\n\n  /**\n   * sanity check\n   * @returns {object}\n   */\n  this.sanityCheck = function() {\n    return Jose.caniuse();\n  };\n\n  /**\n   * encrypts text\n   * @param {!string} cipherText string to encrypt\n   * @returns {Promise}\n   */\n  this.encrypt = function(cipherText) {\n    return this.encrypter.encrypt(cipherText);\n  };\n};\n\nmodule.exports.PANJWE = PANJWE;\nexports.PANJWE = PANJWE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},157:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("\n;// CONCATENATED MODULE: ./benchmark/js/helpers/utils.js\nconst cel = tag => document.createElement(tag);\nconst utils_gel = id => document.getElementById(id);\nconst gecn = cls => document.getElementsByClassName(cls);\nconst qs = cls => document.querySelector(cls);\nconst qsa = cls => document.querySelectorAll(cls);\n\n\nfunction extractHostname(url) {\n  var hostname;\n  if (url.indexOf(\"//\") > -1) {\n    hostname = url.split('/')[2];\n  }\n  else {\n    hostname = url.split('/')[0];\n  }\n  //find & remove port number\n  hostname = hostname.split(':')[0];\n  //find & remove \"?\"\n  hostname = hostname.split('?')[0];\n  return hostname;\n}\n\nconst catchErr = err => {\n  console.trace(`[ERROR CAUGHT]`, err);\n  const header = cel('div');\n  const pre = cel('pre');\n  const trace = cel('pre');\n  const ts = new Date().toLocaleString();\n  header.innerHTML = `[${ts}] error caught:`;\n  utils_gel('error_log').appendChild(header);\n  \n  if (err.stack) {\n    trace.innerHTML = err.stack;\n    utils_gel('error_log').appendChild(trace);\n  } else {\n    pre.classList.add('error');\n    pre.innerHTML = (typeof err === 'string') ? err : JSON.stringify(err, null, 2);\n    utils_gel('error_log').appendChild(pre);\n  }\n  return err;\n}\n\n\nfunction serializeObject(obj) {\n  if (!obj) {\n    return '';\n  }\n\n  var s = [];\n\n  Object.keys(obj).forEach(function (key) {\n    if (obj[key] && obj[key].constructor === Array) {\n      obj[key].forEach(function (value) {\n        s.push(key + '=' + encodeURIComponent(value));\n      });\n    } else {\n      s.push(key + '=' + encodeURIComponent(obj[key]));\n    }\n  });\n\n  return s.join('&');\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/compliance-settings.js\n\n\nconst injectComplianceSettings = () => {\n  const terms = {\n    complianceType: \"TERMS_AND_CONDITIONS\",\n    uri: \"usa.visa.com/legal/checkout/terms-of-service.html\",\n  };\n  const privacy = {\n    complianceType: \"PRIVACY_POLICY\",\n    uri: \"usa.visa.com/legal/global-privacy-notice.html\",\n  };\n  const remember = {\n    complianceType: \"REMEMBER_ME\",\n    uri: \"visa.checkout.com/privacy\",\n  };\n\n  intentPayload.complianceSettings = {\n    complianceResources: [terms, privacy, remember]\n  };\n}\n\nconst removeComplianceSettings = () => {\n  intentPayload && delete intentPayload.complianceSettings;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/stubs/data.js\n\n\n\nlet initData;\nlet intentPayload;\n\nconst initDataRoot = {\n  srciTransactionId: \"replace me\",\n  // srciDpaId: \"DPAID\",\n  srcInitiatorId: \"[A-Fa-f0-9|A-Fa-f0-9]{8}\\\\-([A-Fa-f0-9|A-Fa-f0-9]{4}\\\\-){3}[A-Fa-f0-9|A-Fa-f0-9]{12}\",\n  dpaData: {\n    // srcDpaId: \"SRCDPAID\",\n    dpaPresentationName: \"Disney Online\",\n    dpaUri: \"http://www.disneyonline.com\"\n  },\n  dpaTransactionOptions: {\n    dpaLocale: \"US\",\n    dpaAcceptedBillingCountries: [\"US\",\"CA\"],\n    dpaAcceptedShippingCountries: [\"US\",\"CA\"],\n    dpaBillingPreference: \"FULL\",\n    dpaShippingPreference: \"FULL\",\n    consumerNameRequested: true,\n    consumerEmailAddressRequested: true,\n    consumerPhoneNumberRequested: true,\n    paymentOptions: {\n      dpaDynamicDataTtlMinutes: 2,\n      dynamicDataType: \"DYNAMIC_CARD_SECURITY_CODE\",\n      dpaPanRequested: false\n    },\n    reviewAction: \"continue\",\n    transactionType: \"PURCHASE\",\n    orderType: \"REAUTHORIZATION\",\n    payloadTypeIndicator: \"SUMMARY\",\n    transactionAmount: {\n      transactionAmount: \"99.95\",\n      transactionCurrencyCode: \"USD\"\n    },\n    merchantOrderId: \"28b1b61b-bbec-4637-b78f-33babc3b5187\",\n    merchantCategoryCode: \"3000\",\n    merchantCountryCode: \"US\",\n    threeDsPreference: \"NONE\",\n    threeDsInputData: {\n      requestorId: \"requestorId\",\n      acquirerId: \"acquirerId\",\n      acquirerMid: \"acquirerMid\"\n    },\n    customInputData:{\n      checkoutOrchestrator: \"merchant\",//\"TESTING\", // 'merchant' is integrated exp\n      dpaIntegrationType: \"PSP\"\n    }\n  }\n};\n\nconst userInfo = {\n  identityProvider: \"SRC\",\n  identityValue: \"senthilr@mailinator.com\",\n  type: \"EMAIL\"\n};\n\nconst intentPayloadRoot = {\n  srcCorrelationId: \"\",\n  srciTransactionId: \"\",\n  srcDigitalCardId: \"\",\n  encryptedCard: \"\",\n  idToken: \"\",\n  windowRef: \"\",\n  consumer:{\n    consumerIdentity: {\n      identityProvider: \"SRC\", \n      identityType: \"EMAIL_ADDRESS\",\n      identityValue: \"ashok.vbox28@mailinator.com\"\n    },\n    mobileNumber: {\n      phoneNumber: \"4153334444\",\n      countryCode: \"1\"\n    },\n    emailAddress: \"ashok.vbox28@mailinator.com\",\n    nationalIdentifier: \"USA\",\n    countryCode: \"US\",\n    languageCode: \"EN\",\n    firstName: \"PSP\",\n    lastName: \"Tester\",\n    fullName: \"Psp Tester\"\n  },\n  dpaTransactionOptions: {\n    dpaLocale: \"US\",\n    dpaAcceptedBillingCountries: [\"US\",\"CA\"],\n    dpaAcceptedShippingCountries: [\"US\",\"CA\"],\n    dpaBillingPreference: \"ALL\",\n    dpaShippingPreference: \"ALL\",\n    consumerNameRequested: true,\n    consumerEmailAddressRequested: true,\n    consumerPhoneNumberRequested: true,\n    paymentOptions: {\n      dpaDynamicDataTtlMinutes: 2,\n      dynamicDataType: \"TAVV\",\n      dpaPanRequested: false\n    },\n    reviewAction: \"continue\",\n    checkoutDescription: \"Sample checkout\",\n    transactionType: \"PURCHASE\",\n    orderType: \"REAUTHORIZATION\",\n    payloadTypeIndicator: \"SUMMARY\",\n    transactionAmount: {\n      transactionAmount: \"99.95\",\n      transactionCurrencyCode: \"USD\"\n    },\n    merchantOrderId: \"ABC12345\",\n    merchantCategoryCode: \"merchantCategoryCode\",\n    merchantCountryCode: \"US\",\n    threeDsInputData: {\n      requestorId: \"requestorId\",\n      acquirerId: \"acquirerId\",\n      acquirerMid: \"acquirerMid\"\n    },\n    customInputData:{\n      dpaIntegrationType:\"PSP\"\n    }\n  },\n  payloadTypeIndicatorCheckout: \"SUMMARY\",\n  recipientIdCheckout: \"\",\n  payloadTypeIndicatorPayload: \"SUMMARY\",\n  recipientIdPayload: \"\",\n  assuranceData: {\n    verificationData:[{\n      verificationType: \"CARDHOLDER\",\n      verificationEntity: \"01\",\n      verificationMethod: \"01\",\n      verificationresponses: \"01\",\n      verificationResults: \"01\",\n      verificationTimestamp: \"1646416550\"\n    }]\n  },\n  srciActionCode: \"NEW_USER\" \n};\n\nlet srcProfiles = [];\n\nconst benchmark = {\n  init: 0,\n  isRecognized: 0,\n  identityLookup: 0,\n  initiateIdentityValidation: 0,\n  UIUX_to_OTP: 0,\n  completeIdentityValidation: 0,\n  getSrcProfile: 0,\n  UIUX_to_cardList: 0,\n  checkout: 0,\n  addCard: 0,\n  enrollUser: 0,\n  unbind: 0,\n};\n\nconst benchmarkState = {\n  sdkUrl: '',\n};\n\nconst resetFlow = () => {\n  console.info('RESET')\n  initData = Object.assign({}, initDataRoot);\n  intentPayload = Object.assign({}, intentPayloadRoot);\n  srcProfiles = [];\n};\n\n\nconst getIntentPayload = () => {\n  if (!intentPayload) {\n    intentPayload = Object.assign({}, intentPayloadRoot);\n  }\n\n  if (utils_gel('compliance_toggle').checked) {\n    injectComplianceSettings();\n  } else {\n    removeComplianceSettings();\n  }\n\n  return intentPayload;\n};\n\nconst setIntentPayload = payload => {\n  intentPayload = payload;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/email.js\n\n\n\n// To autofill the email in idlookup field\nfunction emailSetter(email) {\n  if (email) {\n    const em = utils_gel('emailInput');\n    em.value = email;\n\n    autoIdLookupEmailAddress(email);\n    autoFillEmailAddressInCheckoutApirequest(email);\n  }\n}\n\nfunction setHistoricalEmails() {\n  let emailHistorical = localStorage.getItem('email_historical');\n\n  if (emailHistorical) {\n    const history = utils_gel('email_historical');\n    emailHistorical = JSON.parse(emailHistorical);\n\n    // remove existing node\n    qsa('#email_historical option').forEach(node => {\n      node.parentNode.removeChild(node);\n    });\n\n    for (let i=0; i<emailHistorical.length; i++) {\n      let option = cel('option');\n      option.value = emailHistorical[i];\n      option.className = 'historical_email_option';\n      option.appendChild(document.createTextNode(emailHistorical[i]));\n\n      history.appendChild(option);\n    }\n  }\n}\n\n// update email in idLookup payload\nfunction autoIdLookupEmailAddress(email) {\n  let emailHistorical;\n\n  if (userInfo) {\n    userInfo.identityValue = email;\n    localStorage.setItem('email', email);\n\n    emailHistorical = localStorage.getItem('email_historical');\n\n    if (!emailHistorical) {\n      emailHistorical = [];\n    } else {\n      emailHistorical = JSON.parse(emailHistorical);\n    }\n\n    if (emailHistorical.indexOf(email) < 0) {\n      emailHistorical.push(email);\n      localStorage.setItem('email_historical', JSON.stringify(emailHistorical));\n      setHistoricalEmails();\n    }\n  }\n}\n\n// To autofill the email in checkout field\nfunction autoFillEmailAddressInCheckoutApirequest(email) {\n  const intentPayload = getIntentPayload();\n  \n  if (intentPayload) {\n    intentPayload.consumer.emailAddress = emailInput.value;\n    intentPayload.consumer.consumerIdentity.identityValue = emailInput.value;\n    intentPayload.consumer.mobileNumber.phoneNumber = '4153334444';\n  }\n}\n\n\nconst setEmailErrorMessage = (msg) => {\n  gel('email_error_message').innerHTML = msg;\n}\n\n// bootstrap\nutils_gel('emailInput').onblur = function populateEmail() {\n  const email = this.value;\n  emailSetter(email);\n}\nutils_gel('emailInput').onfocus = () => {\n  utils_gel('email_error_message').innerHTML = '';\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/stubs/environment-keys.js\nconst environmentKeys = null;\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/get-keys.ts\n\nvar getFromLocalStorage = function (key) {\n    var values = localStorage.getItem(key);\n    if (values) {\n        return JSON.parse(values);\n    }\n    return {};\n};\nvar getEnvironmentKeys = function () {\n    return getFromLocalStorage('environmentKeys');\n};\nvar getEncryptionKeys = function () {\n    return getFromLocalStorage('keys');\n};\nvar getEnvironment = function (key) {\n    var envKeys = (environmentKeys) ? environmentKeys : getEnvironmentKeys();\n    var genericKey = key.replace(/SDKv[0-9].*$/i, '').trim();\n    if (envKeys[genericKey]) {\n        return envKeys[genericKey];\n    }\n    return null;\n};\nvar getMerchantApiKey = function (key) {\n    if (key) {\n        var env = getEnvironment(key);\n        if (env)\n            return env.srcInitiatorId;\n    }\n    return null;\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/ui/generate-sdk-list.js\n\n\nconst envs = {\n  // \"--- Pick\": \"\",\n  QaPerf_DockerEE: \"https://src-qaperfb.k8s-np-cls1-p.trusted.visa.com\",\n  QAWKSPCE: \"https://b2cp-vco-qab.oce-np-sm-ddp-p-en.trusted.visa.com\",\n  DEVWKSPCE: 'https://b2cp-vco-devwkspceb.oce-np-sm-ddp-p-en.trusted.visa.com', // DockerEE\n  SandBox: \"https://sandbox.secure.checkout.visa.com\",\n\n  // QaPerf: \"https://perf.qa.secure.checkout.visa.com\",\n  // CERT: \"https://cert.secure.checkout.visa.com\",\n  // CERT1: \"https://cert1.secure.checkout.visa.com\",\n  // ICL: \"https://demo.icl.visa.com\",\n  // QAINT: \"https://int.qa.secure.checkout.visa.com\",\n  Vbox444_ExternalSrci: \"https://vbox444.secure.checkout.visa.com\",\n};\n\n\nconst buildSdkPicker = () => {\n  const sdkSelector_v2_integrated = utils_gel('sdk_picker_v3');\n  const storedSdk = localStorage.getItem('sdk');\n  \n  for (let k in envs) {\n    const option_v3 = cel('option');\n    option_v3.setAttribute('value', `${envs[k]}/checkout-widget/resources/js/src-i-adapter/visa-sdk.js?v2`)\n    option_v3.innerHTML = `${k} SDKv2 INTEGRATED`;\n    option_v3.selected = storedSdk === `${envs[k]}/checkout-widget/resources/js/src-i-adapter/visa-sdk.js?v2`;\n    sdkSelector_v2_integrated.appendChild(option_v3);\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/can-use-test-cards-api.js\nconst canUseTestCardApi = () => {\n  switch (window.location.hostname) {\n    // case 'localhost':\n    case 'cnojima.github.io':\n      return false;\n  }\n\n  return true;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/components/card-bin-selector/index.js\n\n\n\nconst bins = {\n  '-- 400552 (non-tokenizable?)': '400552',\n  '-- 420767 (tokenizable)': '420767',\n  '-- 414718 (tokenizable)': '414718'\n};\n\nconst handleBinSelection = e => {\n  localStorage.setItem('binRange', e.target.value);\n}\n\nconst initBinSelector = () => {\n  const binRange = localStorage.getItem('binRange');\n  const select = utils_gel('bin_range');\n\n  for (let k in bins) {\n    const option = document.createElement('option');\n    option.value = bins[k];\n    option.label = k;\n\n    if (binRange === bins[k]) {\n      option.selected = true;\n    }\n\n    select.appendChild(option);\n  }\n\n  select.addEventListener('change', handleBinSelection);\n\n  if (canUseTestCardApi()) {\n    utils_gel('bin_selector').style.display = 'block';\n  }\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/async/init.js\n\n\n\n\nasync function init(adapter, key, startTime) {\n  console.log('[INIT] start');\n  const apikey = getMerchantApiKey(key);\n  if (apikey) {\n    initData.apikey = apikey;\n  }\n\n  console.log('[INIT_DATA]', initData);\n\n  await adapter.init(initData).then((response) => {\n    const endTime = Date.now();\n    benchmark.init = endTime - startTime;\n    console.log(`[init] ttaken: ${(benchmark.init)}ms`, response);\n\n    if (!Object.keys(response).length) {\n      utils_gel('init_complete').checked = true;\n      utils_gel('init_complete_timing').innerHTML = `${(benchmark.init)}ms`;\n    } else if (response.error) {\n      throw new Error(JSON.stringify(response, null, 2));\n    } else {\n      console.error('init failed, check console');\n    }\n\n    return response;\n  }).catch(catchErr);\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/is-recognized.js\n\n\n\n\nasync function isRecognized(adapter) {\n  console.log('[RECOGNIZE] start');\n  const startTime = Date.now();\n\n  let token;\n  const response = await adapter.isRecognized().catch(catchErr);\n  const endTime = Date.now();\n\n  benchmark.isRecognized = endTime - startTime;\n\n  utils_gel('is_recognized_complete').checked = true;\n  utils_gel('is_recognized_complete_timing').innerHTML = `${benchmark.isRecognized}ms`;\n\n  if (response.idTokens) {\n    token = response.idTokens[0];\n  } else if (response.recognized === false) {\n    utils_gel('is_recognized_complete_timing').innerHTML = `${benchmark.isRecognized}ms (unrecognized)`;\n  } else if (response.error) {\n    throw new Error(JSON.stringify(response, null, 2));\n  }\n\n  console.log(`[recognized] ttaken: ${(benchmark.isRecognized)}ms`);\n  return token;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/get-root-domain.js\n/*\n  cannot import util from visa-sdk; copied util over for now\n*/\n\n\n// This dummy URL is updated by a deploy script based on the environment. E.g.\n// when deploying to production, CI replaces dev.www.v.me with\n// secure.checkout.visa.com, but when deploying to cert, it will be\n// cert.secure.checkout.visa.com.\nconst STATIC_ROOT_DOMAIN = 'https://dev.www.v.me';\n\nconst sdkScriptRegex =\n  /^https:\\/\\/[\\w-\\.]+\\.?\\.visa\\.com\\/checkout\\-widget\\/resources\\/js\\/src-i-adapter\\/visa[\\-sS]{1,2}dk\\.js/;\n\nfunction getSDKScriptEl() {\n  const scripts = document.querySelectorAll('script');\n\n  for (const script of scripts) {\n    if (script.src.match(sdkScriptRegex)) {\n      return script;\n    }\n  }\n\n  return null;\n}\n\nconst assetsMap = {\n  '//assets.secure.checkout.visa.com': '//secure.checkout.visa.com',\n  '//cert-assets.secure.checkout.visa.com': '//cert.secure.checkout.visa.com',\n  '//sandbox-assets.secure.checkout.visa.com': '//sandbox.secure.checkout.visa.com'\n};\n\nfunction mapAssetsUrl(url) {\n  const assetDomains = Object.keys(assetsMap);\n\n  for (const assetDomain of assetDomains) {\n    if (url.indexOf(assetDomain) !== -1) {\n      return url.replace(assetDomain, assetsMap[assetDomain]);\n    }\n  }\n\n  return url;\n}\n\n// Root domain is updated by a deploy script based on the environment. E.g.\n// when deploying to production, CI replaces dev.www.v.me with\n// secure.checkout.visa.com, but when deploying to cert, CI uses\n// cert.secure.checkout.visa.com.\nconst dummyUrlHash = 'aHR0cHM6Ly9kZXYud3d3LnYubWU'; // btoa('https://dev.www.v.me')\nconst wasDummyUrlReplaced = STATIC_ROOT_DOMAIN !== window.atob(dummyUrlHash);\n\nfunction getRootDomain() {\n  if (wasDummyUrlReplaced) {\n    return STATIC_ROOT_DOMAIN;\n  }\n\n  // In container deployments, the dummy url may not have been replaced. In this\n  // case we need to determine the environment url from the visaSdk.js script tag.\n\n  const sdkScriptEl = getSDKScriptEl();\n\n  if (sdkScriptEl) {\n    return mapAssetsUrl(sdkScriptEl.src.split('/', 3).join('/'));\n  }\n\n  // Default to the prod URL for any abnormal integration.\n  return 'https://secure.checkout.visa.com';\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/load-sdk.js\n\n\n\nconst loadSdk = (sdkUrl, callback) => {\n  const loadStart = Date.now();\n  let sdkMount = getSDKScriptEl();\n  let tag;\n\n  if (sdkMount) {\n    console.info('>>>> removing <script /> tag from prior load');\n    sdkMount.parentNode.removeChild(sdkMount);\n  }\n\n  tag = document.createElement(\"script\");\n  tag.src = sdkUrl;\n  tag.type = 'text/javascript';\n  tag.async = false;\n  tag.onload = () => {\n    callback(loadStart).catch(err => {\n      utils_gel('error_log').innerHTML = err;\n    });\n  }\n\n  const head = document.getElementsByTagName(\"head\")[0];\n  (head || document.body).appendChild(tag);\n}\n\n/* harmony default export */ const load_sdk = (loadSdk);\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/update-benchmarks.js\n\n\n\nlet startTime;\n\nconst setStartTime = () => startTime = Date.now();\n\nconst updateBenchmarks = () => utils_gel('benchmark_data').value = JSON.stringify(benchmark, null, 2);\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/uuid.js\n\n\n\n// Method to generate random UUID\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16 | 0,\n      v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\n// To autofill UUID on every page refresh\nfunction autoFillUUID(key) {\n  const intentPayload = getIntentPayload();\n  const srciTransactionId = uuidv4();\n  const env = getEnvironment(key);\n  initData.srciTransactionId = srciTransactionId;\n  intentPayload.srciTransactionId = srciTransactionId;\n\n  const bad = ['srcDpaId', 'panEncryptionId'];\n  for (let k in env) {\n    if (bad.indexOf(k) === -1)\n      initData[k] = env[k];\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/ui/reset-ui.js\n\n\n\n\n\nconst targets = [\n  'init_complete', 'is_recognized_complete', 'auth_complete', 'get_src_profile_complete', 'checkout_complete', 'unbind_complete'\n];\n\nconst resetUi = () => {\n  window.otp_listener = false;\n\n  targets.forEach(id => {\n    utils_gel(id).checked = false;\n    utils_gel(`${id}_timing`).innerHTML = '';\n  });\n\n  Array(qsa('.messaging')).forEach(el => {\n    el.innerHTML = '';\n  });\n\n  utils_gel('auth_breakdown').innerHTML = '';\n  utils_gel('error_log').innerHTML = '';\n  utils_gel('benchmark_data').value = '';\n  utils_gel('otp_entry').style.display = 'none';\n\n  for (let k in benchmark) {\n    benchmark[k] = 0;\n  }\n\n  // BIN selector\n  if (canUseTestCardApi()) {\n    utils_gel('bin_selector').style.display = 'block';\n  }\n\n  // compliance cb\n  if (utils_gel('compliance_toggle').checked) {\n    console.log('...injectComplianceSettings');\n    injectComplianceSettings();\n  } else {\n    console.log('...removeComplianceSettings');\n    removeComplianceSettings();\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/fetch.js\nconst genId = () => Math.random().toString(36).substring(7);\nconst systemCorrelationId = `1_1492561111_766_48_${genId()}_CHECKOUT-WIDGET`;\nconst systemSessionId = `vme_qa_001${genId()}`;\n\nvar fetchReq = function (options) {\n  const {\n    url,\n    body,\n    method,\n    headers\n  } = options;\n  headers['X-CORRELATION-ID'] = systemCorrelationId;\n  headers['dfpSessionId'] = systemSessionId;\n  headers['X-THMID'] = systemSessionId;\n\n  const contentType = headers['Content-Type'];\n  let finalBody = {};\n\n  if (contentType && contentType.includes('x-www-form-urlencoded')) {\n    finalBody = fetch_serializeObject(body);\n  } else {\n    finalBody = JSON.stringify(body);\n  }\n  return fetch(\n      url,\n      Object.assign({}, {\n        body: finalBody,\n        credentials: 'same-origin',\n        headers: headers,\n        method\n      })\n    )\n    .then(res => handleJsonResponse(res))\n    .then(data => data)\n    .catch(error => {return error});\n};\n\nfunction fetch_uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n      v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nfunction handleJsonResponse(res) {\n  const headers = {};\n  res.headers.forEach(function (v, k) {\n    headers[k] = v;\n  });\n  // console.log('headers - ' + JSON.stringify(headers));\n  return (\n    res\n    .json()\n    .then(function (data) {\n      console.log('data', data);\n      return {\n        data: data,\n        headers: headers\n      }\n    })\n    .catch(function () {\n      return {\n        headers: headers\n      }\n    }))\n};\n\n\nfunction fetch_serializeObject(obj) {\n  if (!obj) {\n    return '';\n  }\n\n  var s = [];\n\n  Object.keys(obj).forEach(function (key) {\n    if (obj[key] && obj[key].constructor === Array) {\n      obj[key].forEach(function (value) {\n        s.push(key + '=' + encodeURIComponent(value));\n      });\n    } else {\n      s.push(key + '=' + encodeURIComponent(obj[key]));\n    }\n  });\n\n  return s.join('&');\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/get-otp.js\n\n\n\n\nlet isQAPerf = false;\nconst useProxy = true;\n\nasync function getOTP(email) {\n  console.info('@getOTP - attempting to retrieve OTP code via API');\n\n  isQAPerf = localStorage.getItem('sdk').indexOf('qaperf') > -1;\n\n  if (isQAPerf) {\n    const res = await fetch(`/id?email=${email}`).then(handleJsonResponse);\n\n    if (res.data.uuid) {\n      // sha256 hash of UUID + email\n      // no transpile of node code, leverage simple API\n      const hash = await fetch(`/sha?s=${res.data.uuid}${email.toLowerCase()}`).then(handleJsonResponse);\n      // base64 encode shasum\n      try {\n        const encrypted = btoa(hash.data.sha256);\n        const otpBody = await fetch(`/otp?encrypted=${encrypted}`).then(handleJsonResponse);\n// console.log('otp', otpBody);Q\n\n        if (otpBody.data.otpValue) {\n          console.log(`got OTP value [${otpBody.data.otpValue}]`);\n          return otpBody.data.otpValue;\n        }\n      } catch (err) {\n        throw new Error(err);\n      }\n      throw new Error(`OTP fetch failed`);\n    }\n  } else {\n    let token;\n    const proxy = `${window.location.protocol}//${window.location.hostname}:${window.location.port}/proxy`;\n    const url = 'https://vbox671.secure.checkout.visa.com/srcsdktester/generateOtp';\n  \n    const environment = extractHostname(benchmarkState.sdkUrl);\n    // console.log(\"Environment:\", environment);\n  \n    // Make indirect call to get OTP\n    const options = {\n      method: 'GET',\n      url: useProxy ? `${proxy}?url=${url}` : url,\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json; charset=UTF-8',\n        'envn': environment,\n        'email': email,\n      }\n    };\n\n    const result = await fetchReq(options).catch(err => {\n      console.error('getOTP error:', err);\n    });\n    if (result.data.otpValue) {\n      return result.data.otpValue;\n    } else {\n      console.warn(`could not autoget OTP code from [${url}]`);\n    }\n  }\n\n  return null;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/can-use-otp-api.js\n\nconst canUseOtpApi = () => {\n  const hostname = window.location.hostname;\n  const sdkUrl = localStorage.getItem('sdk');\n\n  switch(true) {\n    case (hostname.indexOf('github') > -1):\n    case (hostname.indexOf('heroku') > -1):\n    case (sdkUrl && sdkUrl.indexOf('qaperf') > -1):\n    // case (hostname.indexOf('localhost') > -1):\n      return false;\n  }\n\n  return true;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/checkout.js\n\n\n\n\nasync function checkout(adapter) {\n  const intentPayload = getIntentPayload();\n  console.log('[CHECKOUT] start');\n  const email = utils_gel('emailInput').value;\n  autoFillEmailAddressInCheckoutApirequest(email);\n\n  console.log('-- intent payload', intentPayload);\n  const startTime = Date.now();\n  const response = await adapter.checkout(intentPayload);\n  const endTime = Date.now();\n\n  benchmark.checkout = endTime - startTime;\n\n  console.log(`[checkout] ttaken: ${(benchmark.checkout)}ms`);\n  \n  if (response.error || response['reason']) {\n    throw new Error(JSON.stringify(response, null, 2));\n  } else {\n    utils_gel('checkout_complete').checked = true;\n    utils_gel('checkout_complete_timing').innerHTML = `${(benchmark.checkout)}ms`;\n  }\n  return response;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/get-src-profile.js\n\n\n\n\nasync function getSrcProfile(adapter, authToken) {\n  console.log('[GET_SRC_PROFILE] start');\n  const intentPayload = getIntentPayload();\n\n  const startTime = Date.now();\n  const response = await adapter.getSrcProfile(authToken);\n  const endTime = Date.now();\n  benchmark.getSrcProfile = endTime - startTime;\n  console.log(`[getSrcProfile] ttaken: ${(benchmark.getSrcProfile)}ms`);\n\n  if (response.error) {\n    throw new Error(JSON.stringify(response, null, 2));\n  } else if (response['reason']) {\n    console.warn('Unable to get card list: %o', response);\n    throw new Error(JSON.stringify(response, null, 2));\n  } else {\n    utils_gel('get_src_profile_complete').checked = true;\n    utils_gel('get_src_profile_complete_timing').innerHTML = `${(benchmark.getSrcProfile)}ms`;\n  }\n\n  response.profiles.forEach(profile => srcProfiles.push(profile));\n\n  // set first card\n  try {\n    intentPayload.srcDigitalCardId = srcProfiles[0].maskedCards[0].srcDigitalCardId;\n  } catch (ex) {\n    console.warn('SRC Profile contained no cards');\n    // throw new Error('profile masked card missing srcDigitalCardId', JSON.stringify(srcProfiles, null, 2));\n  }\n  intentPayload.idToken = srcProfiles[0].idToken;\n  intentPayload.srcCorrelationId = response.srcCorrelationId;\n  intentPayload.profiles = srcProfiles;\n\n  console.log(response)\n  return response;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/async/unbind.js\n\n\n\n\nconst unbind = async (adapter, token) => {\n  if (token) {\n    console.log('[UNBIND]');\n    const start = Date.now();\n    const response = await adapter.unbindAppInstance({});\n    const end = Date.now();\n\n    benchmark.unbind = end - start;\n\n    if (response.error) {\n      throw new Error(JSON.stringify(response, null, 2));\n    } else {\n      utils_gel('unbind_complete').checked = true;\n      utils_gel('unbind_complete_timing').innerHTML = `${benchmark.unbind}ms`;\n\n      console.log('Unbind result received from Visa SRC System');\n//      console.log('Response Data', JSON.stringify(response));\n    }\n    updateBenchmarks();\n    return response;\n  }\n\n  return;\n}\n\n// EXTERNAL MODULE: ./benchmark/js/jose/visa-encrypt.js\nvar visa_encrypt = __webpack_require__(1);\n;// CONCATENATED MODULE: ./benchmark/js/stubs/pan-encryption-keys.js\nconst keys = null;\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/encrypt-card.js\n\n\n\n\n\n// external, scrubbed sites\nconst encryptionKeys = (keys) ? keys : getEncryptionKeys();\n\nconst getRsaKeyFromDomain = () => {\n  const domain = getRootDomain();\n  console.log(`-- detected ${domain} from visa sdk url`);\n\n  switch (true) {\n    case 'https://secure.checkout.visa.com':\n      return encryptionKeys.production;\n    case domain.indexOf('qaperf') > -1:\n      return encryptionKeys.qa_perf;\n    case domain.indexOf('cert.') > -1:\n      console.log('using cert enc encryptionKeys');\n      return encryptionKeys.cert;\n    case domain.indexOf('sandbox.') > -1:\n      console.log('using sbx enc encryptionKeys');\n      return encryptionKeys.sandbox;\n    default:\n      return encryptionKeys.cert;\n  }\n}\n\nconst PANJWE_visa = async (s) => {\n  const { publicKey, kid } = getRsaKeyFromDomain();\n  console.info(`[PANJWE] kid: ${kid}`);\n  console.info('[PANJWE] publicKey: ', publicKey);\n  const crypt = new visa_encrypt.PANJWE(kid, publicKey);\n  return crypt.encrypt(s);\n}\n\n/* harmony default export */ const encrypt_card = (async (cardDataObject) => await PANJWE_visa(JSON.stringify(cardDataObject)));\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/get-visa-card.js\n\n\n\n\n\nconst handleCardData = async cardData => {\n  const ret = { cardData: null, encryptedCard: null };\n  const d = cardData.pan || cardData.data?.pan || cardData.data;\n  const expDateArray = d.ExpirationDate.split('/');\n  const vcoCard = {\n    card : {\n      cardSecurityCode: d.Cvv2Value,\n      cardholderFullName: d.CardholderName || \"SRC SDK\",\n      panExpirationMonth: parseInt(expDateArray[0]),\n      panExpirationYear: parseInt('20' + expDateArray[1]),\n      primaryAccountNumber: d.PrimaryAccountNumber,\n      cardholderFirstName: \"TestTool\",\n      cardholderLastName: \"SampleData\",\n      paymentAccountReference: \"\",\n\n      billingAddress: {\n        addressId: \"\",\n        name: \"\",\n        line1: d.AddressStreet,\n        line2: d.AddressStreet2,\n        line3: d.AddressStreet3,\n        city: d.City,\n        state: d.State,\n        countryCode: d.Country,\n        zip: d.AddressPostalCode,\n        createTime: \"\",\n        lastUsedTime: \"\",\n      }\n    }\n  };\n\n  console.log('object to encrypt: ', vcoCard);\n  ret.encryptedCard = await encrypt_card(vcoCard);\n  console.log(ret);\n  return ret;\n}\n\n/* harmony default export */ const get_visa_card = (async () => {\n  const binRange = utils_gel('bin_range').value;\n  const cardData = await fetch(`/cards?bin=${binRange}`).then(handleJsonResponse);\n  return await handleCardData(cardData);\n});\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/get-visa-card-manual.js\n\n\n\nconst encryptManualCardEntry = async () => {\n  const s = utils_gel('pan_json').value;\n  let pan;\n\n  try {\n    pan = JSON.parse(s);\n    return await handleCardData(pan);\n  } catch (e) {\n    catchErr('manual PAN JSON parse failed.');\n    return { encryptedCard: null }\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/flows/after-auth.js\n\n\n\n\n\n\n\n\n\n\nasync function afterAuthNewUser(adapter, label) {\n  const intentPayload = getIntentPayload();\n  console.info(`[ADD_CARD] ${label || 'new user + enroll'}`);\n\n  if (canUseTestCardApi()) {\n    intentPayload.encryptedCard = (await get_visa_card()).encryptedCard;\n  } else {\n    intentPayload.encryptedCard = (await encryptManualCardEntry()).encryptedCard;\n  }\n  // console.log('intent payload after getVisaCard: ', intentPayload);\n\n  if (intentPayload.srcDigitalCardId) {\n    console.info('card already assigned, undefining intentPayload.srcDigitalCardId')\n    intentPayload.srcDigitalCardId = undefined;\n  }\n\n  console.info(`[CHECKOUT] ${label || 'new user + enroll'}`);\n  const checkoutSuccess = await checkout(adapter).catch(catchErr);\n\n  if (!checkoutSuccess || checkoutSuccess.error) {\n    console.error(`checkout error detected: `, checkoutSuccess);\n    throw new Error(JSON.stringify(checkoutSuccess));\n  } else {\n    updateBenchmarks();\n  }\n\n  if (checkoutSuccess && checkoutSuccess.unbindAppInstance) {\n    await unbind(adapter, checkoutSuccess).catch(catchErr);\n  }\n}\n\n\nasync function afterAuthReturning(adapter, token) {\n  console.info('[CARD_LIST]');\n  // getSrcProfile\n  const srcProfiles = await getSrcProfile(adapter, token).catch(catchErr);\n  updateBenchmarks();\n\n  console.log(\"------\", srcProfiles);\n\n  if (srcProfiles.error) {\n    // throw new Error(srcProfiles.error);\n    console.warn(srcProfiles.error);\n  }\n\n  const preferAddCard = utils_gel('add_card_flow').checked;\n\n  // checkout\n  if (\n    false === preferAddCard &&\n    srcProfiles &&\n    !srcProfiles.error &&\n    srcProfiles.profiles[0].maskedCards.length > 0\n  ) {\n    console.info('[CHECKOUT] returning user');\n    const checkoutSuccess = await checkout(adapter).catch(catchErr);\n\n    if (!checkoutSuccess || checkoutSuccess.error) {\n      console.error(`checkout error detected: `, checkoutSuccess);\n      throw new Error(JSON.stringify(checkoutSuccess));\n    } else {\n      updateBenchmarks();\n    }\n\n    if (checkoutSuccess && checkoutSuccess.unbindAppInstance) {\n      await unbind(adapter, checkoutSuccess).catch(catchErr);\n    }\n  } else {\n    afterAuthNewUser(adapter, 'returning user add card');\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/flows/auth-flow.js\n\n\n\n\n\n\n\nlet auth_flow_isQAPerf;\n\nwindow.otp_listener = false;\n\n\n\nasync function submitOtp(otpCode) {\n  console.info('---- submitOtp');\n  const completeIdentityValidationStart = Date.now();\n  const res = await completeIdentityValidation(window.c2p_adapter, {\n    validationData: otpCode\n  }).catch(catchErr);\n  benchmark.completeIdentityValidation = Date.now() - completeIdentityValidationStart;\n\n  utils_gel('auth_complete').checked = true;\n  utils_gel('auth_complete_timing').innerHTML = `${(benchmark.identityLookup + benchmark.initiateIdentityValidation + benchmark.completeIdentityValidation) / 1000}s`;\n  utils_gel('auth_breakdown').innerHTML = `[ identityLookup: ${benchmark.identityLookup}ms ]<br/>[ initiateIdentityValidation: ${benchmark.initiateIdentityValidation}ms ]<br/>[ completeIdentityValidation: ${benchmark.completeIdentityValidation}ms ]`;\n\n  console.log(`/probe`, res);\n  return res;\n}\n\nasync function completeIdentityValidation(adapter, code) {\n  console.log(\"@completeIdentityValidation - Validation Data => \", code);\n  const response = await adapter.completeIdentityValidation(code).catch(catchErr);\n  console.log(`---- completeIdentityValidation - response`, response);\n\n  if (response.error) {\n    return null;\n  } else if (response['reason']) {\n    console.log('Unable to verify OTP: %o', response);\n  } else {\n    console.log('Response from Verify OTP: %o', response);\n  }\n  return response;\n}\n\nasync function initiateIdentityValidation(adapter) {\n  console.log('@initiateIdentityValidation');\n  return await adapter.initiateIdentityValidation().then((response) => {\n    console.log(`response from initiateIdentyValidation`, response);\n    if (response['reason']) {\n      console.warn('Unable to initialize Identity validation, error: %o', response);\n      return false;\n    }\n    return response;\n  }).catch(catchErr);\n}\n\n\n\nasync function authFlow(afterAuth, updateBenchmarks) {\n  console.log('[AUTH_FLOW] start');\n  let otpCode;\n  const email = localStorage.getItem('email');\n\n  // idLookup\n  const identityLookupStart = Date.now();\n\n  console.log('-- starting async identityLookup');\n  const res = await window.c2p_adapter.identityLookup({\n    identityProvider: \"SRC\",\n    identityValue: email,\n    type: \"EMAIL\"\n  }).catch(catchErr);\n  console.log('-- identityLookup return', res);\n\n  benchmark.identityLookup = Date.now() - identityLookupStart;\n  updateBenchmarks();\n\n  if (res.error) {\n    throw new Error(JSON.stringify(res, null, 2));\n  } else if (res.consumerPresent || res.accessToken) {\n    // reissueance\n    console.log('--- reissuance');\n    const initiateIdentityValidationStart = Date.now();\n    const res = await initiateIdentityValidation(window.c2p_adapter).catch(catchErr);\n    benchmark.initiateIdentityValidation = Date.now() - initiateIdentityValidationStart;\n    benchmark.UIUX_to_OTP = Date.now() - startTime;\n    updateBenchmarks();\n\n    if (res.error) {\n      throw new Error(JSON.stringify(res, null, 2));\n    } else if (res !== false) {\n      if (canUseOtpApi() === false) {\n        if (window.otp_listener === false) {\n          console.log('instantiating manual OTP form')\n          window.otp_listener = true;\n\n          async function handler(e) {\n            const otp = utils_gel('otp_value').value;\n            console.log(`OTP submitted [${otp}]`);\n\n            if (otp) {\n              const res = await submitOtp(otp).catch(catchErr);\n              updateBenchmarks();\n\n              if (res) {\n                await afterAuth(window.c2p_adapter, res?.idToken).catch(catchErr);\n                // return res;\n              }\n            } else {\n              catchErr('No OTP value detected.')\n            }\n          };\n\n          const globalHandler = async e => {\n            if (e.srcElement.id === 'otp_submit') {\n              await handler(e);\n            }\n          }\n\n          // show OTP field + button\n          window._manual_otp = true;\n          utils_gel('otp_entry').style.display = 'block';\n          document.addEventListener('click', globalHandler);\n        }\n        return;\n      } else {\n        console.log('--- automatic OTP shown');\n        otpCode = await getOTP(email);\n\n        // manually enter for sandbox+\n        if (!otpCode) {\n          console.log('--- prompt OTP shown');\n          otpCode = await prompt('Enter OTP');\n        }\n        return submitOtp(otpCode);\n      }\n    }\n  }\n\n  console.info('[AUTH_FLOW] consumer not present');\n  return res;\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/flows/returning.js\n\n\n\n\n\nconst returningFlow = async (accessToken) => {\n  await afterAuthReturning(window.c2p_adapter, accessToken);\n\n  utils_gel('critical_apis').innerHTML = `Critical API timings: ${(benchmark.init + benchmark.isRecognized + benchmark.getSrcProfile) / 1000}s`;\n  utils_gel('checkout_apis').innerHTML = `Checkout API timings: ${(benchmark.checkout + benchmark.unbind) / 1000}s`;\n  updateBenchmarks();\n\n  utils_gel('done').innerHTML = 'done';\n};\n\n;// CONCATENATED MODULE: ./benchmark/js/flows/start.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst validate = () => {\n  // manual, don't use helpers here\n  const flowType = qs('input[name=\"flow_selector\"]:checked');\n\n  if (!flowType) {\n    catchErr('Select a Flow to start.');\n    return false;\n  }\n\n  // edge-cases, no localStorage values set\n  if (!localStorage.getItem('sdk')) {\n    localStorage.setItem('sdk', utils_gel('sdk_picker_v3').value);\n  }\n  if (!localStorage.getItem('email')) {\n    const email = utils_gel('emailInput').value || null;\n    if (email) {\n      localStorage.setItem('email', email);\n    }\n  }\n\n  if (\n    utils_gel('returning_flow').checked === false &&\n    !canUseTestCardApi() && utils_gel('pan_json').value === ''\n  ) {\n    catchErr('Please generate a test card before proceeding.');\n    return false;\n  }\n\n  return true;\n};\n\nconst startFlow = function() {\n  setStartTime();\n  const loadStart = Date.now();\n  resetUi();\n  resetFlow();\n\n  if (validate()) {\n    const sdkUrl = this.value;\n    const key = this.options[this.selectedIndex].innerHTML.trim();\n    // update initData from env config\n    autoFillUUID(key);\n\n    if (sdkUrl) {\n      benchmarkState.sdkUrl = sdkUrl;\n      localStorage.setItem('sdk', sdkUrl);\n      // run(val, userType === 'new_user_flow' ? returningFlow : newUserFlow);\n\n      load_sdk(sdkUrl, async () => {\n        let accessToken;\n        let consumerPresent;\n\n        // Default selection: Visa is the SRC-i\n        const vcoAdapter = window.vAdapters.VisaSRCI;\n        const adapter = new vcoAdapter();\n\n        window.c2p_adapter = adapter;\n\n        // init\n        await init(adapter, key, loadStart).catch(catchErr);\n        updateBenchmarks();\n\n        // isRecognized\n        accessToken = await isRecognized(adapter).catch(catchErr);\n        updateBenchmarks();\n\n        // identity/auth flow\n        if (!accessToken) {\n          console.info(`recognize 204 - no access token`);\n          consumerPresent = await authFlow(afterAuthReturning, updateBenchmarks).catch(catchErr);\n          updateBenchmarks();\n\n          if (consumerPresent) {\n            // recognized return obj\n            if (consumerPresent.consumerPresent === false) {\n              await afterAuthNewUser(adapter);\n            } else if (consumerPresent.idToken) {\n              await afterAuthReturning(adapter, consumerPresent.idToken);\n            } else {\n              await afterAuthReturning(adapter);\n            }\n          } else {\n            throw new Error('authFlow failure detected');\n          }\n        } else {\n          console.log('[ReturningRecognized] got accessToken', accessToken);\n          returningFlow(accessToken);\n        }\n      });\n    }\n  }\n};\n\n/* harmony default export */ const start = (startFlow);\n\n;// CONCATENATED MODULE: ./benchmark/js/components/sdk-selector/index.js\n\n\n\nconst bindSdkGo = () => {\n  utils_gel('go_v3').onclick = () => {\n    start.call(utils_gel('sdk_picker_v3'));\n  };\n}\n\nconst handleSdkSelection = e => {\n  if (e.target.classList.contains('sdk-picker')) {\n    localStorage.setItem('sdk', e.target.value);\n  }\n};\n\nconst bindSdkSelection = () => {\n  document.addEventListener('change', handleSdkSelection);\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/components/toggle/index.js\n\n\n\nconst toggleHandler = async e => {\n  if (e.target.className.indexOf('toggle-header') > -1) {\n    e.target.parentNode.classList.toggle(\"open\");\n    e.stopPropagation();\n  }\n}\n\nif (!canUseTestCardApi()) {\n  utils_gel('pan_entry').style.display = 'block';\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/helpers/generate-email-address.js\n\n\n// export default () => `${uuidv4()}@mailinator.com`;\n/* harmony default export */ const generate_email_address = (() => `c2p_${Date.now()}@mailinator.com`);\n\n;// CONCATENATED MODULE: ./benchmark/js/ui/bind-compliance.js\n\n\n\nconst bindComplianceToggle = () => {\n  utils_gel('compliance_toggle').addEventListener('change', e => {\n    if (e.target.checked) {\n      injectComplianceSettings();\n      localStorage.setItem('setCompliance', 'on');\n    } else {\n      removeComplianceSettings();\n      localStorage.setItem('setCompliance', 'off');\n    }\n  });\n\n  if (localStorage.getItem('setCompliance') === 'on') {\n    utils_gel('compliance_toggle').checked = true;\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/ui/event-handlers.js\n\n\n\n\n\n\n\n\n\n\nlet automateTimeout;\nlet automateClickTimeout;\nlet timerInterval;\n\ndocument.body.addEventListener('click', e => {\n  try {\n    toggleHandler(e);\n  } catch (e) {\n    catchErr(e);\n  }\n});\n\nconst handleBubbledEvents = async e => {\n  switch (e.target.id) {\n    case 'add_card_flow':\n    case 'returning_flow':\n      localStorage.setItem('flow_selector', e.target.value);\n      break;\n\n    case 'automate':\n      let timerValue = 30000;\n      if (e.target.checked === true) {\n        localStorage.setItem('automate', 'true');\n        automateClickTimeout = setTimeout(() => {\n          utils_gel('go_v3').click();\n        }, 1000);\n        automateTimeout = setTimeout(() => {\n          window.location.reload();\n        }, timerValue);\n        let displayTimer = timerValue / 1000;\n        timerInterval = setInterval(() => {\n          displayTimer -= 1;\n          utils_gel('timer').innerHTML = `${displayTimer}s until refresh`;\n        }, 1000);\n        document.body.className = 'disable-ui';\n      } else {\n        localStorage.setItem('automate', 'false');\n        clearTimeout(automateClickTimeout);\n        clearTimeout(automateTimeout);\n        clearInterval(timerInterval);\n        utils_gel('timer').innerHTML = ``;\n        document.body.className = '';\n      }\n      break;\n  }\n}\n\n\n\n\nconst handleConfigArea = () => {\n  utils_gel('config').innerHTML = JSON.stringify(initData, null, 2);\n};\n\nconst attachEventHandlers = () => {\n  const lsEmail = localStorage.getItem('email');\n  const automate = localStorage.getItem('automate');\n  const userType = localStorage.getItem('user_flow_selector');\n  const flowType = localStorage.getItem('flow_selector');\n  \n  bindComplianceToggle();\n  bindSdkGo();\n  bindSdkSelection();\n\n  initBinSelector();\n\n\n  // multiselect\n  document.addEventListener('click', e => {\n    if (e.target.tagName === 'OPTION' && e.target.className === 'historical_email_option') {\n      e.target.value && emailSetter(e.target.value);\n    }\n  });\n  \n  // dropdown\n  document.addEventListener('change', e => {\n    if (e.target.tagName === 'SELECT' && e.target.id === 'email_historical') {\n      e.target.value && emailSetter(e.target.value);\n    }\n  });\n\n  // new user\n  utils_gel('new_user').addEventListener('click', () => {\n    const newEmail = generate_email_address();\n    localStorage.setItem('email', newEmail);\n    utils_gel('emailInput').value = newEmail;\n  });\n\n  document.addEventListener('change', e => {\n    handleBubbledEvents(e);\n  });\n\n  if (lsEmail) {\n    emailSetter(lsEmail);\n  }\n\n  if (automate === 'true') {\n    // console.log('automate is true');\n    const cb = utils_gel('automate');\n    cb && (cb.checked = true);\n    const evt = new Event('change', {\n      bubbles: true\n    });\n    cb.dispatchEvent(evt);\n  }\n\n  handleConfigArea();\n\n  if (userType) {\n    qs(`input[value=\"${userType}\"]`) && (qs(`input[value=\"${userType}\"]`).checked = true);\n  }\n  if (flowType) {\n    qs(`input[value=\"${flowType}\"]`) && (qs(`input[value=\"${flowType}\"]`).checked = true);\n  }\n}\n\n;// CONCATENATED MODULE: ./benchmark/js/index.ts\n\n\n\n\n\nattachEventHandlers();\nbuildSdkPicker();\nsetHistoricalEmails();\nif (location.hostname.indexOf('visa.com') < 0 &&\n    location.hostname.indexOf('localhost') < 0) {\n    // if (true) { \n    // localStorage as necessary metadata?\n    var encKeys = getEncryptionKeys();\n    var envKeys = getEnvironmentKeys();\n    if (!(encKeys === null || encKeys === void 0 ? void 0 : encKeys.sandbox) || !(envKeys === null || envKeys === void 0 ? void 0 : envKeys.SandBox)) {\n        utils_gel('main').style.display = 'none';\n        utils_gel('need_metadata').style.display = 'block';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///157\n")}},__webpack_module_cache__={};function __webpack_require__(n){var c=__webpack_module_cache__[n];if(void 0!==c)return c.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}var __webpack_exports__=__webpack_require__(157)})();